/* Automatically generated by Kelbt from "rlparse.kl".
 *
 * Parts of this file are copied from Kelbt source covered by the GNU
 * GPL. As a special exception, you may use the parts of this file copied
 * from Kelbt source without restriction. The remainder is derived from
 * "rlparse.kl" and inherits the copyright status of that file.
 */

#line 1 "rlparse.kl"
/*
 *  Copyright 2001-2007 Adrian Thurston <thurston@complang.org>
 */

/*  This file is part of Ragel.
 *
 *  Ragel is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 *  Ragel is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with Ragel; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 */

#include "rlparse.h"
#include "ragel.h"
#include "inputdata.h"
#include <iostream>
#include <errno.h>
#include <stdlib.h>

using std::cerr;
using std::endl;

Parser6::Parser6( InputData *id, const char *fileName, char *sectionName,
		const InputLoc &sectionLoc, const HostLang *hostLang,
		MinimizeLevel minimizeLevel,
		MinimizeOpt minimizeOpt )
:
	sectionName(sectionName),
	hostLang(hostLang),
	tokHead(0),
	parseSubstitutions(false)
{
	pd = new ParseData( id, std::string(fileName), std::string(sectionName),
			id->nextMachineId++, sectionLoc, hostLang, minimizeLevel, minimizeOpt );
	exportContext.append( false );
	includeHistory.append( IncludeHistoryItem( 
			fileName, sectionName ) );
}

#line 113 "rlparse.kh"
#line 116 "rlparse.kh"
#line 155 "rlparse.kh"
#line 1794 "rlparse.kl"


#line 65 "rlparse.cc"
struct Parser6_Lel_action_arg_list
{
#line 958 "rlparse.kl"

	ActionArgList *argList;


#line 71 "rlparse.cc"
};

struct Parser6_Lel_action_param
{
#line 272 "rlparse.kl"

	ActionParam *param;


#line 81 "rlparse.cc"
};

struct Parser6_Lel_action_param_list
{
#line 296 "rlparse.kl"

	ActionParamList *paramList;


#line 91 "rlparse.cc"
};

struct Parser6_Lel_action_ref
{
#line 947 "rlparse.kl"

	Action *action;


#line 101 "rlparse.cc"
};

struct Parser6_Lel_aug_type
{
#line 738 "rlparse.kl"

	ParserLoc loc;
	AugType augType;


#line 112 "rlparse.cc"
};

struct Parser6_Lel_expression
{
#line 530 "rlparse.kl"

	Expression *expression;


#line 122 "rlparse.cc"
};

struct Parser6_Lel_factor
{
#line 1285 "rlparse.kl"

	Factor *factor;


#line 132 "rlparse.cc"
};

struct Parser6_Lel_factor_rep_num
{
#line 1239 "rlparse.kl"

	int rep;


#line 142 "rlparse.cc"
};

struct Parser6_Lel_factor_with_aug
{
#line 644 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 152 "rlparse.cc"
};

struct Parser6_Lel_factor_with_ep
{
#line 628 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 162 "rlparse.cc"
};

struct Parser6_Lel_factor_with_label
{
#line 612 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 172 "rlparse.cc"
};

struct Parser6_Lel_factor_with_neg
{
#line 1249 "rlparse.kl"

	FactorWithNeg *factorWithNeg;


#line 182 "rlparse.cc"
};

struct Parser6_Lel_factor_with_rep
{
#line 1144 "rlparse.kl"

	FactorWithRep *factorWithRep;


#line 192 "rlparse.cc"
};

struct Parser6_Lel_inline_item
{
#line 1549 "rlparse.kl"

	InlineItem *inlineItem;


#line 202 "rlparse.cc"
};

struct Parser6_Lel_inline_list
{
#line 1528 "rlparse.kl"

	InlineList *inlineList;


#line 212 "rlparse.cc"
};

struct Parser6_Lel_join
{
#line 513 "rlparse.kl"

	Join *join;


#line 222 "rlparse.cc"
};

struct Parser6_Lel_join_or_lm
{
#line 414 "rlparse.kl"

	MachineDef *machineDef;


#line 232 "rlparse.cc"
};

struct Parser6_Lel_lm_part_list
{
#line 438 "rlparse.kl"

	LmPartList *lmPartList;


#line 242 "rlparse.cc"
};

struct Parser6_Lel_local_err_name
{
#line 1132 "rlparse.kl"

	int error_name;


#line 252 "rlparse.cc"
};

struct Parser6_Lel_longest_match_part
{
#line 462 "rlparse.kl"

	LongestMatchPart *lmPart;


#line 262 "rlparse.cc"
};

struct Parser6_Lel_nfa_expr
{
#line 234 "rlparse.kl"

	NfaUnion *nfaUnion;


#line 272 "rlparse.cc"
};

struct Parser6_Lel_nfa_round_list
{
#line 194 "rlparse.kl"

	NfaRoundVect *roundsList;


#line 282 "rlparse.cc"
};

struct Parser6_Lel_nfa_round_spec
{
#line 174 "rlparse.kl"

	long depth;
	long grouping;


#line 293 "rlparse.cc"
};

struct Parser6_Lel_nfa_rounds
{
#line 221 "rlparse.kl"

	NfaRoundVect *roundsList;


#line 303 "rlparse.cc"
};

struct Parser6_Lel_opt_export
{
#line 136 "rlparse.kl"

	bool isSet;


#line 313 "rlparse.cc"
};

struct Parser6_Lel_opt_lm_part_action
{
#line 486 "rlparse.kl"

	Action *action;


#line 323 "rlparse.cc"
};

struct Parser6_Lel_priority_aug
{
#line 1079 "rlparse.kl"

	int priorityNum;


#line 333 "rlparse.cc"
};

struct Parser6_Lel_priority_name
{
#line 1063 "rlparse.kl"

	int priorityName;


#line 343 "rlparse.cc"
};

struct Parser6_Lel_range_lit
{
#line 1357 "rlparse.kl"

	Literal *literal;


#line 353 "rlparse.cc"
};

struct Parser6_Lel_regular_expr
{
#line 1394 "rlparse.kl"

	RegExpr *regExpr;


#line 363 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_char
{
#line 1446 "rlparse.kl"

	ReItem *reItem;


#line 373 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_item
{
#line 1429 "rlparse.kl"

	ReItem *reItem;


#line 383 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_or_char
{
#line 1503 "rlparse.kl"

	ReOrItem *reOrItem;


#line 393 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_or_data
{
#line 1470 "rlparse.kl"

	ReOrBlock *reOrBlock;


#line 403 "rlparse.cc"
};

struct Parser6_Lel_term
{
#line 581 "rlparse.kl"

	Term *term;


#line 413 "rlparse.cc"
};

struct Parser6_Lel_term_short
{
#line 560 "rlparse.kl"

	Term *term;


#line 423 "rlparse.cc"
};

struct Parser6_Lel_token_type
{
#line 265 "rlparse.kl"

	Token token;


#line 433 "rlparse.cc"
};

union Parser6_UserData
{
	struct Parser6_Lel_action_arg_list action_arg_list;
	struct Parser6_Lel_action_param action_param;
	struct Parser6_Lel_action_param_list action_param_list;
	struct Parser6_Lel_action_ref action_ref;
	struct Parser6_Lel_aug_type aug_type;
	struct Parser6_Lel_expression expression;
	struct Parser6_Lel_factor factor;
	struct Parser6_Lel_factor_rep_num factor_rep_num;
	struct Parser6_Lel_factor_with_aug factor_with_aug;
	struct Parser6_Lel_factor_with_ep factor_with_ep;
	struct Parser6_Lel_factor_with_label factor_with_label;
	struct Parser6_Lel_factor_with_neg factor_with_neg;
	struct Parser6_Lel_factor_with_rep factor_with_rep;
	struct Parser6_Lel_inline_item inline_item;
	struct Parser6_Lel_inline_list inline_list;
	struct Parser6_Lel_join join;
	struct Parser6_Lel_join_or_lm join_or_lm;
	struct Parser6_Lel_lm_part_list lm_part_list;
	struct Parser6_Lel_local_err_name local_err_name;
	struct Parser6_Lel_longest_match_part longest_match_part;
	struct Parser6_Lel_nfa_expr nfa_expr;
	struct Parser6_Lel_nfa_round_list nfa_round_list;
	struct Parser6_Lel_nfa_round_spec nfa_round_spec;
	struct Parser6_Lel_nfa_rounds nfa_rounds;
	struct Parser6_Lel_opt_export opt_export;
	struct Parser6_Lel_opt_lm_part_action opt_lm_part_action;
	struct Parser6_Lel_priority_aug priority_aug;
	struct Parser6_Lel_priority_name priority_name;
	struct Parser6_Lel_range_lit range_lit;
	struct Parser6_Lel_regular_expr regular_expr;
	struct Parser6_Lel_regular_expr_char regular_expr_char;
	struct Parser6_Lel_regular_expr_item regular_expr_item;
	struct Parser6_Lel_regular_expr_or_char regular_expr_or_char;
	struct Parser6_Lel_regular_expr_or_data regular_expr_or_data;
	struct Parser6_Lel_term term;
	struct Parser6_Lel_term_short term_short;
	struct Parser6_Lel_token_type token_type;
	struct Token token;
};

struct Parser6_LangEl
{
	char *file;
	int line;
	int type;
	int reduction;
	int state;
	int causeReduce;
	union Parser6_UserData user;
	unsigned int retry;
	struct Parser6_LangEl *next, *child, *prev;
};

struct Parser6_Block
{
	struct Parser6_LangEl data[8128];
	struct Parser6_Block *next;
};

#line 499 "rlparse.cc"
unsigned int Parser6_startState = 0;

short Parser6_indicies[] = {
	227, -1, 227, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	227, 227, 227, 227, -1, -1, -1, -1, 
	-1, -1, -1, -1, 227, 227, 227, 227, 
	227, 227, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 227, 227, 
	-1, -1, -1, -1, 227, 1, 0, 509, 
	229, -1, 229, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	229, 229, 229, 229, -1, -1, -1, -1, 
	-1, -1, -1, -1, 229, 229, 229, 229, 
	229, 229, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 229, 229, 
	-1, -1, -1, -1, 225, -1, -1, 2, 
	18, -1, 226, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	5, 6, 7, 8, -1, -1, -1, -1, 
	-1, -1, -1, -1, 235, 12, 13, 16, 
	14, 15, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 10, 9, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	228, 492, 493, 494, 495, 496, 497, 498, 
	499, 500, 501, 502, 503, 504, 505, 506, 
	-1, 11, 3, 4, 17, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 33, 
	34, 19, 20, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 421, 423, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 21, 464, 464, 
	464, -1, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 464, -1, 
	-1, 464, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 464, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 464, 464, 
	464, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 464, 464, -1, -1, -1, 
	464, 464, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 24, 464, 
	464, 464, -1, 464, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 464, 
	-1, -1, 464, 464, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 464, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 464, 
	464, 464, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 464, 464, -1, -1, 
	-1, 464, 464, 464, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 31, 
	264, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	264, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 30, 32, -1, -1, -1, -1, 236, 
	25, 26, 28, 29, 27, 248, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 248, 248, 36, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 255, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 35, 258, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 37, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 421, 423, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 38, 422, 476, 
	477, 478, -1, 475, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 260, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 474, 
	-1, -1, 472, 473, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 479, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 468, 
	469, 470, 471, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 480, 481, -1, -1, 
	-1, 482, 483, 39, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 465, -1, 
	467, -1, 463, 466, 437, 437, 437, -1, 
	437, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 437, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 437, -1, -1, 437, -1, -1, 437, 
	437, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 437, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 437, 437, 437, 437, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, -1, -1, 437, 437, 437, 437, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 40, 437, 437, 437, 
	-1, 437, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	437, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 437, -1, -1, 437, -1, -1, 
	437, 437, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 437, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 437, 437, 437, 
	437, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, -1, -1, 437, 437, 437, 
	437, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 41, 230, 437, 
	437, 437, -1, 437, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 437, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 437, -1, -1, 437, 
	-1, -1, 437, 437, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 437, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 437, 
	437, 437, 437, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, -1, -1, 437, 
	437, 437, 437, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 42, 
	437, 437, 437, -1, 437, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 437, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 437, -1, -1, 
	437, -1, -1, 437, 437, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 437, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	437, 437, 437, 437, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, -1, -1, 
	437, 437, 437, 437, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, 44, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 263, 476, 477, 478, -1, 475, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 261, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 474, -1, -1, 472, 473, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	479, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 468, 469, 470, 471, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 480, 
	481, -1, -1, -1, 482, 483, 39, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 465, -1, 467, -1, 463, 466, 229, 
	-1, -1, 229, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 229, 229, 229, 229, -1, -1, 
	-1, -1, -1, -1, -1, -1, 229, 229, 
	229, 229, 229, 229, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	229, 229, -1, -1, -1, -1, -1, -1, 
	-1, 45, 46, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 47, 49, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 48, 52, 253, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 249, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 251, 51, 
	50, 257, 259, 53, 443, 444, 445, -1, 
	441, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 442, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 231, -1, -1, 474, -1, -1, 472, 
	473, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 446, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 468, 469, 470, 471, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 60, 55, 
	54, 480, 481, 56, 58, 59, 482, 483, 
	39, 57, -1, -1, 61, 62, 63, 462, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 436, 440, 438, 439, 447, 443, 444, 
	445, -1, 441, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 442, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 232, -1, -1, 474, -1, 
	-1, 472, 473, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 446, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 468, 469, 
	470, 471, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	60, 55, 54, 480, 481, 56, 58, 59, 
	482, 483, 39, 57, -1, -1, 61, 62, 
	63, 462, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 436, 440, 438, 439, 447, 
	443, 444, 445, -1, 441, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 442, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 233, -1, -1, 
	474, -1, -1, 472, 473, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 446, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	468, 469, 470, 471, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 60, 55, 54, 480, 481, 56, 
	58, 59, 482, 483, 39, 57, -1, -1, 
	61, 62, 63, 462, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 436, 440, 438, 
	439, 447, 443, 444, 445, -1, 441, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 442, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 234, 
	-1, -1, 474, -1, -1, 472, 473, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	446, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 468, 469, 470, 471, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 60, 55, 54, 480, 
	481, 56, 58, 59, 482, 483, 39, 57, 
	-1, -1, 61, 62, 63, 462, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 436, 
	440, 438, 439, 447, 464, 464, 464, -1, 
	464, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 464, -1, -1, 464, 
	464, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 464, 464, 464, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 464, 464, -1, -1, -1, 464, 464, 
	464, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 64, 238, -1, -1, 
	18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	5, 6, 7, 8, -1, -1, -1, -1, 
	-1, -1, -1, -1, 235, 12, 13, 16, 
	14, 15, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 10, 9, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	228, 492, 493, 494, 495, 496, 497, 498, 
	499, 500, 501, 502, 503, 504, 505, 506, 
	-1, 11, 3, 4, 76, -1, -1, -1, 
	-1, -1, -1, 84, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 77, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 78, -1, 421, 423, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 73, 
	-1, 74, 75, 82, 80, 81, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 65, 
	-1, -1, -1, -1, -1, 278, -1, -1, 
	-1, -1, 79, -1, -1, -1, -1, -1, 
	-1, -1, 66, 67, 285, 70, -1, 71, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 72, -1, -1, -1, -1, -1, 
	402, 406, -1, -1, 83, 76, -1, -1, 
	-1, -1, -1, -1, 84, -1, -1, -1, 
	-1, 22, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 77, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 68, 78, -1, 421, 
	423, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 87, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	73, -1, 74, 75, 82, 80, 81, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	86, 85, -1, -1, -1, -1, 278, -1, 
	-1, -1, -1, 79, -1, -1, -1, -1, 
	-1, -1, -1, 66, 67, 285, 70, -1, 
	71, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 72, -1, -1, -1, -1, 
	-1, 402, 406, -1, -1, 83, 76, -1, 
	-1, -1, -1, -1, -1, 84, -1, -1, 
	-1, -1, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 77, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 68, 78, -1, 
	421, 423, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 73, -1, 74, 75, 82, 80, 81, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 90, 246, 
	-1, -1, -1, -1, 79, -1, -1, -1, 
	-1, -1, -1, -1, -1, 67, 285, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 402, 406, -1, -1, 83, 89, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 243, 88, 254, 252, -1, -1, 
	91, 437, 437, 437, -1, 437, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 437, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 437, -1, 
	-1, 437, -1, -1, 437, 437, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 437, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 437, 437, 437, 437, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, -1, 
	-1, 437, 437, 437, 437, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 92, 489, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	488, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 93, -1, -1, -1, 
	-1, 94, 448, 464, 464, 464, -1, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 464, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 464, -1, -1, 464, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 464, 464, 464, 464, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	464, 464, -1, -1, -1, 464, 464, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 95, 97, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 489, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	488, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 96, -1, -1, -1, 
	-1, 94, 101, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	489, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 488, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 100, -1, -1, -1, -1, 94, 
	99, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 489, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 488, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	98, -1, -1, -1, -1, 94, 456, 457, 
	103, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 489, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 488, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	102, -1, -1, -1, -1, 94, 460, 461, 
	476, 477, 478, -1, 475, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 262, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	474, -1, -1, 472, 473, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 479, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	468, 469, 470, 471, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 480, 481, -1, 
	-1, -1, 482, 483, 39, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 465, 
	-1, 467, -1, 463, 466, 112, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 239, 114, -1, -1, 
	273, -1, -1, 273, 115, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 273, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 273, 113, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 273, -1, -1, -1, -1, -1, 116, 
	76, -1, -1, -1, -1, 279, -1, 84, 
	279, -1, -1, 279, 23, 117, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 279, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 77, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 279, 279, -1, -1, -1, 68, 
	78, -1, 421, 423, -1, 118, 119, 120, 
	-1, 279, -1, -1, -1, -1, -1, 279, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 73, -1, 74, 75, 82, 
	80, 81, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 79, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	280, 70, -1, 71, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 72, -1, 
	-1, -1, -1, -1, 402, 406, -1, -1, 
	83, 409, -1, -1, 409, 409, 409, -1, 
	409, 409, 409, 409, 409, 409, 409, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 105, 409, 409, -1, 409, 409, 
	409, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 409, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 409, 409, -1, -1, -1, 
	409, 409, -1, 409, 409, -1, 409, 409, 
	409, 409, 409, 409, -1, -1, -1, -1, 
	409, -1, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 409, 409, 409, 409, -1, 409, 409, 
	409, 409, 409, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 409, 409, 409, 287, 
	-1, -1, -1, -1, 287, -1, 287, 287, 
	-1, -1, 287, 287, 287, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 287, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 287, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 287, 287, -1, -1, -1, 287, 287, 
	-1, 287, 287, -1, 287, 287, 287, 121, 
	287, -1, -1, -1, -1, -1, 287, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 287, -1, 287, 287, 287, 287, 
	287, 289, -1, -1, 131, 130, 289, -1, 
	289, 289, -1, -1, 289, 289, 289, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 289, 133, -1, 132, -1, 
	129, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 289, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 289, 289, -1, -1, -1, 
	289, 289, -1, 289, 289, -1, 289, 289, 
	289, 289, 289, -1, -1, -1, -1, -1, 
	289, -1, 306, 308, 310, 134, 351, 355, 
	357, 359, 353, 361, 363, 367, 369, 371, 
	365, 373, 339, 343, 345, 347, 341, 349, 
	315, 319, 321, 323, 317, 325, 327, 331, 
	333, 335, 329, 337, 289, -1, 289, 289, 
	289, 289, 289, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 313, 312, 314, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 122, -1, -1, 
	123, 124, 125, 126, 127, 128, 301, -1, 
	-1, 301, 301, 301, -1, 301, 301, 391, 
	394, 301, 301, 301, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	301, 301, -1, 301, 393, 301, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 301, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	136, 301, -1, -1, -1, 301, 301, -1, 
	301, 301, -1, 301, 301, 301, 301, 301, 
	392, -1, -1, -1, -1, 301, -1, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, -1, 301, 301, 301, 301, 301, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 301, 301, 301, 106, 107, 108, 76, 
	-1, -1, -1, -1, -1, -1, 84, -1, 
	-1, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 77, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 410, 78, 
	-1, 421, 423, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 82, 80, 
	81, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 79, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 404, 406, -1, -1, 83, 
	76, -1, -1, -1, -1, -1, -1, 84, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 77, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 410, 
	78, -1, 421, 423, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 82, 
	80, 81, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 79, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 405, 406, -1, -1, 
	83, 407, -1, -1, 407, 407, 407, -1, 
	407, 407, 407, 407, 407, 407, 407, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 407, 407, -1, 407, 407, 
	407, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 407, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 407, 407, -1, -1, -1, 
	407, 407, -1, 407, 407, 417, 407, 407, 
	407, 407, 407, 407, -1, -1, -1, -1, 
	407, 417, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, -1, 407, 407, 
	407, 407, 407, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 407, 407, 407, 408, 
	-1, -1, 408, 408, 408, -1, 408, 408, 
	408, 408, 408, 408, 408, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 408, 408, -1, 408, 408, 408, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 408, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 408, 408, -1, -1, -1, 408, 408, 
	-1, 408, 408, 419, 408, 408, 408, 408, 
	408, 408, -1, -1, -1, -1, 408, 419, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, -1, 408, 408, 408, 408, 
	408, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 408, 408, 408, 433, -1, -1, 
	-1, 433, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 110, 433, -1, -1, -1, 433, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 111, 425, 
	425, 425, -1, 425, -1, -1, 425, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 109, 
	137, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 138, 76, -1, -1, 
	-1, -1, -1, -1, 84, -1, -1, -1, 
	-1, 22, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 77, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 68, 78, -1, 421, 
	423, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	73, -1, 74, 75, 82, 80, 81, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	104, -1, -1, -1, -1, -1, 278, -1, 
	-1, -1, -1, 79, -1, -1, -1, -1, 
	-1, -1, -1, 66, 67, 285, 70, -1, 
	71, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 72, -1, -1, -1, -1, 
	-1, 402, 406, -1, -1, 83, 240, 112, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 265, 76, 
	-1, -1, -1, -1, -1, -1, 84, -1, 
	-1, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 77, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 69, 78, 
	-1, 421, 423, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 73, -1, 74, 75, 82, 80, 
	81, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 235, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 508, 
	-1, -1, 507, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 237, 
	141, -1, 140, -1, -1, -1, -1, -1, 
	278, -1, -1, -1, -1, 79, -1, -1, 
	139, 268, -1, -1, -1, 66, 67, 285, 
	70, -1, 71, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 72, -1, -1, 
	-1, -1, -1, 402, 406, -1, -1, 83, 
	244, -1, -1, 143, 142, 247, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 144, 249, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 250, 443, 444, 445, -1, 441, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 442, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	256, -1, -1, 474, -1, -1, 472, 473, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 446, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 468, 469, 470, 471, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 60, 55, 54, 
	480, 481, 56, 58, 59, 482, 483, 39, 
	57, -1, -1, 61, 62, 63, 462, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	436, 440, 438, 439, 447, 484, 491, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 145, 476, 477, 478, 
	-1, 475, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	449, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 474, -1, -1, 
	472, 473, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 479, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 468, 469, 470, 
	471, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 480, 481, -1, -1, -1, 482, 
	483, 39, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 465, -1, 467, -1, 
	463, 466, 450, 464, 464, 464, -1, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 464, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 464, -1, -1, 464, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 464, 464, 464, 464, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	464, 464, -1, -1, -1, 464, 464, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 146, 454, 464, 464, 464, 
	-1, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	464, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 464, -1, -1, 
	464, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 464, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 464, 464, 464, 
	464, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 464, 464, -1, -1, -1, 464, 
	464, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 147, 452, 464, 
	464, 464, -1, 464, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 464, 
	-1, -1, 464, 464, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 464, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 464, 
	464, 464, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 464, 464, -1, -1, 
	-1, 464, 464, 464, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 148, 
	458, 464, 464, 464, -1, 464, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 464, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 464, -1, -1, 464, 464, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 464, 464, 464, 464, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 464, 464, 
	-1, -1, -1, 464, 464, 464, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 149, 416, -1, -1, 112, 76, -1, 
	-1, -1, -1, -1, -1, 84, -1, -1, 
	-1, -1, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 77, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 68, 78, -1, 
	421, 423, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 73, -1, 74, 75, 82, 80, 81, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 79, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 286, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 402, 406, -1, -1, 83, 150, 
	151, 152, 413, 154, 155, -1, 430, -1, 
	-1, 431, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 424, 153, 411, -1, 
	-1, -1, 156, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 432, 
	412, -1, -1, -1, 156, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 432, 76, -1, -1, -1, -1, -1, 
	-1, 84, -1, -1, -1, -1, 22, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 77, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 68, 78, -1, 421, 423, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 73, -1, 74, 
	75, 82, 80, 81, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 278, -1, -1, -1, -1, 
	79, -1, -1, -1, -1, -1, -1, -1, 
	157, 67, 285, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 402, 406, 
	-1, -1, 83, 76, -1, -1, -1, -1, 
	-1, -1, 84, -1, -1, -1, -1, 22, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	77, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 68, 78, -1, 421, 423, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 73, -1, 
	74, 75, 82, 80, 81, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 274, -1, -1, -1, 
	-1, 79, -1, -1, -1, -1, -1, -1, 
	-1, -1, 67, 285, 70, -1, 71, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 72, -1, -1, -1, -1, -1, 402, 
	406, -1, -1, 83, 76, -1, -1, -1, 
	-1, -1, -1, 84, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 77, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 78, -1, 421, 423, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 73, 
	-1, 74, 75, 82, 80, 81, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 275, -1, -1, 
	-1, -1, 79, -1, -1, -1, -1, -1, 
	-1, -1, -1, 67, 285, 70, -1, 71, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 72, -1, -1, -1, -1, -1, 
	402, 406, -1, -1, 83, 76, -1, -1, 
	-1, -1, -1, -1, 84, -1, -1, -1, 
	-1, 22, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 77, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 68, 78, -1, 421, 
	423, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	73, -1, 74, 75, 82, 80, 81, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 276, -1, 
	-1, -1, -1, 79, -1, -1, -1, -1, 
	-1, -1, -1, -1, 67, 285, 70, -1, 
	71, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 72, -1, -1, -1, -1, 
	-1, 402, 406, -1, -1, 83, 76, -1, 
	-1, -1, -1, -1, -1, 84, -1, -1, 
	-1, -1, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 77, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 68, 78, -1, 
	421, 423, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 73, -1, 74, 75, 82, 80, 81, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 277, 
	-1, -1, -1, -1, 79, -1, -1, -1, 
	-1, -1, -1, -1, -1, 67, 285, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 402, 406, -1, -1, 83, 76, 
	-1, -1, -1, -1, -1, -1, 84, -1, 
	-1, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 77, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 68, 78, 
	-1, 421, 423, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 73, -1, 74, 75, 82, 80, 
	81, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 79, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 281, 
	70, -1, 71, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 72, -1, -1, 
	-1, -1, -1, 402, 406, -1, -1, 83, 
	76, -1, -1, -1, -1, -1, -1, 84, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 77, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 68, 
	78, -1, 421, 423, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 73, -1, 74, 75, 82, 
	80, 81, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 79, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	282, 70, -1, 71, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 72, -1, 
	-1, -1, -1, -1, 402, 406, -1, -1, 
	83, 76, -1, -1, -1, -1, -1, -1, 
	84, -1, -1, -1, -1, 22, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 77, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	68, 78, -1, 421, 423, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 73, -1, 74, 75, 
	82, 80, 81, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 79, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 283, 70, -1, 71, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 72, 
	-1, -1, -1, -1, -1, 402, 406, -1, 
	-1, 83, 76, -1, -1, -1, -1, -1, 
	-1, 84, -1, -1, -1, -1, 22, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 77, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 68, 78, -1, 421, 423, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 73, -1, 74, 
	75, 82, 80, 81, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	79, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 284, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 402, 406, 
	-1, -1, 83, 486, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 288, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	158, 159, -1, -1, 162, -1, 163, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 161, -1, -1, -1, 
	-1, 160, -1, -1, 387, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 290, 377, 
	-1, -1, -1, -1, -1, -1, -1, 291, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 375, -1, -1, 386, 164, -1, -1, 
	-1, -1, -1, -1, 165, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 161, 
	-1, -1, -1, -1, 160, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 293, 377, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 375, 165, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	161, -1, -1, -1, -1, 160, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 295, 377, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 375, 165, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 161, -1, -1, -1, -1, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 296, 377, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 375, 165, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 161, -1, -1, -1, -1, 160, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 297, 377, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 375, 
	165, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 161, -1, -1, -1, -1, 
	160, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 298, 377, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	375, 166, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 161, -1, -1, -1, 
	-1, 160, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 299, 377, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 375, 302, -1, -1, 302, -1, 302, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 302, -1, -1, 
	-1, -1, 302, -1, -1, 302, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 348, 360, 372, 324, 336, 303, -1, 
	-1, 303, -1, 303, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 303, -1, -1, -1, -1, 303, -1, 
	-1, 303, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 311, -1, 346, 358, 370, 
	322, 334, 304, -1, -1, 304, -1, 304, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 304, -1, -1, 
	-1, -1, 304, -1, -1, 304, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 309, 
	-1, 344, 356, 368, 320, 332, 305, -1, 
	-1, 305, -1, 305, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 305, -1, -1, -1, -1, 305, -1, 
	-1, 305, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 307, -1, 340, 352, 364, 
	316, 328, 342, 354, 366, 318, 330, 350, 
	362, 374, 326, 338, 168, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 403, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 167, 22, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 418, -1, 421, 423, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 420, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 414, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 418, -1, 
	421, 423, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 420, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 415, 76, 
	-1, -1, -1, -1, -1, -1, 84, -1, 
	172, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 77, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 69, 78, 
	-1, 421, 423, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 73, -1, 74, 75, 82, 80, 
	81, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 235, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 508, 
	-1, -1, 507, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 237, 
	141, -1, 140, -1, -1, -1, -1, -1, 
	278, -1, -1, -1, -1, 79, -1, -1, 
	-1, 267, -1, -1, -1, 66, 67, 285, 
	70, -1, 71, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 72, -1, -1, 
	-1, -1, -1, 402, 406, -1, -1, 83, 
	112, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 271, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 161, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 171, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	170, -1, 270, 17, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 169, 241, 
	89, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 242, 76, -1, -1, -1, 
	-1, -1, -1, 84, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 77, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 78, -1, 421, 423, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 73, 
	-1, 74, 75, 82, 80, 81, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 245, -1, -1, 
	-1, -1, 79, -1, -1, -1, -1, -1, 
	-1, -1, -1, 67, 285, 70, -1, 71, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 72, -1, -1, -1, -1, -1, 
	402, 406, -1, -1, 83, 487, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 487, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 173, 476, 477, 478, -1, 475, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 451, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 474, -1, -1, 472, 473, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 479, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 468, 469, 470, 471, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	480, 481, -1, -1, -1, 482, 483, 39, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 465, -1, 467, -1, 463, 466, 
	476, 477, 478, -1, 475, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 455, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	474, -1, -1, 472, 473, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 479, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	468, 469, 470, 471, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 480, 481, -1, 
	-1, -1, 482, 483, 39, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 465, 
	-1, 467, -1, 463, 466, 476, 477, 478, 
	-1, 475, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 474, -1, -1, 
	472, 473, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 479, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 468, 469, 470, 
	471, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 480, 481, -1, -1, -1, 482, 
	483, 39, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 465, -1, 467, -1, 
	463, 466, 476, 477, 478, -1, 475, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 459, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 474, -1, -1, 472, 473, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	479, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 468, 469, 470, 471, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 480, 
	481, -1, -1, -1, 482, 483, 39, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 465, -1, 467, -1, 463, 466, 76, 
	-1, -1, -1, -1, -1, -1, 84, -1, 
	-1, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 77, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 410, 78, 
	-1, 421, 423, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 73, -1, 74, 75, 82, 80, 
	81, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 79, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 174, -1, -1, 
	-1, -1, -1, 402, 406, -1, -1, 83, 
	76, -1, -1, -1, -1, -1, -1, 84, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 77, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 410, 
	78, -1, 421, 423, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 73, -1, 74, 75, 82, 
	80, 81, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 79, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 175, -1, 
	-1, -1, -1, -1, 402, 406, -1, -1, 
	83, 76, -1, -1, -1, -1, -1, -1, 
	84, -1, -1, -1, -1, 22, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 77, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	410, 78, -1, 421, 423, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 73, -1, 74, 75, 
	82, 80, 81, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 79, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 176, 
	-1, -1, -1, -1, -1, 402, 406, -1, 
	-1, 83, 427, 427, 427, -1, 427, 426, 
	-1, 427, 433, -1, -1, -1, 433, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 177, 433, 
	-1, -1, -1, 433, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 178, 434, -1, -1, 179, 
	434, 114, -1, -1, 272, -1, -1, 272, 
	115, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 272, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 272, 113, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 272, -1, -1, 
	-1, -1, -1, 116, 491, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 180, 183, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 181, -1, -1, -1, -1, -1, 
	-1, -1, -1, 182, 382, -1, -1, 382, 
	382, 382, -1, 186, 382, -1, -1, 382, 
	382, 382, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 382, 382, 
	-1, 382, -1, 382, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 382, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 382, 382, 
	-1, -1, -1, 382, 382, -1, 382, 382, 
	-1, 382, 382, 382, 382, 382, -1, -1, 
	-1, -1, -1, 382, -1, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 382, 
	382, 382, 437, 437, 437, -1, 437, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 437, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 437, 
	-1, -1, 437, -1, -1, 437, 437, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	437, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 437, 437, 437, 437, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	-1, -1, 437, 437, 437, 437, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 184, 388, 389, 165, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	161, -1, -1, -1, -1, 160, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 294, 377, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 375, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 182, 188, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 187, -1, 182, 
	190, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 395, 403, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 189, 46, 510, 165, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 161, -1, -1, -1, -1, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 269, 377, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 375, 266, 
	490, 391, 394, 191, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 393, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 135, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 392, 391, 394, 192, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	393, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 135, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 392, 391, 394, 193, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 393, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 135, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 392, 428, 
	-1, -1, -1, 156, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	432, 429, -1, -1, -1, 156, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 432, 435, 485, -1, -1, -1, 
	-1, 485, -1, 485, 485, -1, -1, 485, 
	485, 485, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 485, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 485, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 485, 485, 
	-1, -1, -1, 485, 485, -1, 485, 485, 
	-1, 485, 485, 485, 485, 485, -1, -1, 
	-1, 173, -1, 485, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 485, 
	-1, 485, 485, 485, 485, 485, 194, 376, 
	185, 382, -1, -1, 385, 443, 444, 445, 
	-1, 441, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	442, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 384, -1, -1, 474, -1, -1, 
	472, 473, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 446, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 468, 469, 470, 
	471, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 60, 
	55, 54, 480, 481, 56, 58, 59, 482, 
	483, 39, 57, -1, -1, 61, 62, 63, 
	462, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 436, 440, 438, 439, 447, 165, 
	381, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 161, -1, -1, -1, -1, 160, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 379, 377, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 375, 
	196, 195, 197, 185, 382, -1, -1, 390, 
	396, 397, -1, -1, -1, -1, -1, 403, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	198, 165, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 161, -1, -1, -1, 
	-1, 160, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 199, 377, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 375, 165, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 161, -1, -1, 
	-1, -1, 160, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 200, 
	377, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 375, 165, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 161, -1, 
	-1, -1, -1, 160, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	201, 377, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 375, 162, -1, 163, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 387, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 202, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 386, 383, 380, -1, 
	-1, 203, 165, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 161, -1, -1, 
	-1, -1, 160, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 204, 
	377, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 375, 398, 205, 206, 207, 292, 
	165, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 161, -1, -1, -1, -1, 
	160, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 378, 377, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	375, 300, 165, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 161, -1, -1, 
	-1, -1, 160, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 208, 
	377, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 375, 165, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 161, -1, 
	-1, -1, -1, 160, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	209, 377, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 375, 165, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 161, 
	-1, -1, -1, -1, 160, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 210, 377, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 375, 211, 212, 213, 
	165, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 161, -1, -1, -1, -1, 
	160, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 214, 377, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	375, 165, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 161, -1, -1, -1, 
	-1, 160, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 215, 377, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 375, 165, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 161, -1, -1, 
	-1, -1, 160, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 216, 
	377, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 375, 217, 218, 401, 165, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 161, -1, -1, -1, -1, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 219, 377, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 375, 165, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 161, -1, -1, -1, -1, 160, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 220, 377, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 375, 
	221, 400, 165, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 161, -1, -1, 
	-1, -1, 160, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 222, 
	377, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 375, 223, 165, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 161, 
	-1, -1, -1, -1, 160, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 224, 377, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 375, 399, 
};

unsigned short Parser6_keys[] = {
	128, 238, 236, 236, 128, 239, 128, 259, 
	128, 259, 141, 141, 128, 128, 128, 128, 
	45, 271, 40, 272, 40, 272, 128, 273, 
	123, 128, 123, 123, 123, 123, 123, 123, 
	123, 123, 128, 128, 61, 141, 40, 270, 
	59, 128, 45, 271, 131, 131, 40, 316, 
	40, 256, 40, 256, 59, 59, 40, 256, 
	40, 256, 128, 192, 40, 316, 125, 239, 
	61, 140, 40, 264, 123, 123, 41, 269, 
	59, 59, 59, 59, 40, 40, 40, 313, 
	40, 313, 40, 313, 40, 313, 40, 272, 
	125, 259, 33, 305, 33, 305, 33, 305, 
	131, 263, 41, 41, 41, 44, 40, 256, 
	128, 319, 59, 59, 40, 272, 42, 319, 
	42, 319, 42, 319, 59, 59, 59, 59, 
	42, 319, 59, 59, 59, 59, 40, 316, 
	44, 59, 38, 144, 33, 305, 33, 206, 
	33, 186, 33, 293, 33, 206, 131, 131, 
	131, 131, 131, 131, 33, 305, 33, 305, 
	33, 206, 33, 206, 187, 303, 187, 303, 
	184, 304, 133, 145, 33, 305, 59, 59, 
	44, 59, 33, 305, 41, 44, 44, 44, 
	59, 124, 128, 267, 40, 313, 41, 41, 
	128, 318, 40, 316, 59, 59, 40, 272, 
	59, 59, 40, 272, 59, 59, 40, 272, 
	59, 59, 40, 272, 41, 44, 33, 305, 
	44, 44, 44, 44, 44, 44, 184, 307, 
	187, 308, 187, 308, 33, 305, 33, 305, 
	33, 305, 33, 305, 33, 305, 33, 305, 
	33, 305, 33, 305, 33, 305, 128, 317, 
	40, 299, 33, 296, 40, 296, 40, 296, 
	40, 296, 40, 296, 40, 296, 40, 211, 
	40, 211, 40, 211, 40, 211, 207, 211, 
	207, 211, 44, 300, 45, 305, 45, 305, 
	33, 305, 44, 278, 128, 259, 131, 131, 
	131, 262, 33, 305, 41, 142, 40, 316, 
	40, 316, 40, 316, 40, 316, 33, 305, 
	33, 305, 33, 305, 184, 191, 187, 303, 
	187, 303, 187, 191, 38, 144, 128, 318, 
	128, 296, 33, 206, 40, 256, 131, 131, 
	131, 131, 40, 296, 128, 296, 128, 296, 
	44, 125, 131, 300, 61, 61, 59, 59, 
	40, 296, 124, 124, 128, 128, 42, 139, 
	42, 139, 42, 139, 187, 308, 187, 308, 
	191, 191, 33, 186, 44, 44, 41, 41, 
	40, 44, 40, 313, 40, 298, 44, 44, 
	40, 44, 125, 125, 125, 300, 40, 296, 
	40, 296, 40, 296, 43, 299, 41, 41, 
	41, 44, 40, 296, 125, 125, 44, 44, 
	44, 44, 44, 44, 41, 41, 40, 296, 
	41, 41, 40, 296, 40, 296, 40, 296, 
	44, 44, 44, 44, 44, 44, 40, 296, 
	40, 296, 40, 296, 44, 44, 44, 44, 
	181, 181, 40, 296, 40, 296, 44, 44, 
	181, 181, 40, 296, 44, 44, 40, 296, 
	181, 181, 0, 0
};

unsigned int Parser6_offsets[] = {
	0, 111, 112, 224, 356, 488, 489, 490, 
	491, 718, 951, 1184, 1330, 1336, 1337, 1338, 
	1339, 1340, 1341, 1422, 1653, 1723, 1950, 1951, 
	2228, 2445, 2662, 2663, 2880, 3097, 3162, 3439, 
	3554, 3634, 3859, 3860, 4089, 4090, 4091, 4092, 
	4366, 4640, 4914, 5188, 5421, 5556, 5829, 6102, 
	6375, 6508, 6509, 6513, 6730, 6922, 6923, 7156, 
	7434, 7712, 7990, 7991, 7992, 8270, 8271, 8272, 
	8549, 8565, 8672, 8945, 9119, 9273, 9534, 9708, 
	9709, 9710, 9711, 9984, 10257, 10431, 10605, 10722, 
	10839, 10960, 10973, 11246, 11247, 11263, 11536, 11540, 
	11541, 11607, 11747, 12021, 12022, 12213, 12490, 12491, 
	12724, 12725, 12958, 12959, 13192, 13193, 13426, 13430, 
	13703, 13704, 13705, 13706, 13830, 13952, 14074, 14347, 
	14620, 14893, 15166, 15439, 15712, 15985, 16258, 16531, 
	16721, 16981, 17245, 17502, 17759, 18016, 18273, 18530, 
	18702, 18874, 19046, 19218, 19223, 19228, 19485, 19746, 
	20007, 20280, 20515, 20647, 20648, 20780, 21053, 21155, 
	21432, 21709, 21986, 22263, 22536, 22809, 23082, 23090, 
	23207, 23324, 23329, 23436, 23627, 23796, 23970, 24187, 
	24188, 24189, 24446, 24615, 24784, 24866, 25036, 25037, 
	25038, 25295, 25296, 25297, 25395, 25493, 25591, 25713, 
	25835, 25836, 25990, 25991, 25992, 25997, 26271, 26530, 
	26531, 26536, 26537, 26713, 26970, 27227, 27484, 27741, 
	27742, 27746, 28003, 28004, 28005, 28006, 28007, 28008, 
	28265, 28266, 28523, 28780, 29037, 29038, 29039, 29040, 
	29297, 29554, 29811, 29812, 29813, 29814, 30071, 30328, 
	30329, 30330, 30587, 30588, 30845, 30846
};

unsigned short Parser6_targs[] = {
	1, 2, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 18, 19, 20, 21, 22, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 67, 68, 69, 
	70, 71, 72, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 153, 154, 155, 156, 
	157, 158, 159, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 169, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 182, 183, 184, 185, 186, 187, 
	188, 189, 190, 191, 192, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 207, 208, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 218, 219, 
	220, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 221, 221, 221, 221, 221, 221
};

unsigned int Parser6_actInds[] = {
	0, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 22, 24, 26, 28, 30, 
	32, 34, 36, 39, 41, 43, 45, 47, 
	50, 52, 54, 56, 58, 60, 62, 64, 
	66, 68, 70, 72, 74, 76, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 112, 
	114, 116, 118, 120, 122, 124, 126, 128, 
	130, 132, 134, 136, 138, 140, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 269, 271, 273, 
	275, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 314, 316, 318, 320, 322, 
	324, 326, 328, 330, 332, 334, 336, 338, 
	340, 342, 344, 346, 348, 350, 352, 354, 
	356, 358, 360, 362, 364, 366, 368, 370, 
	372, 374, 376, 379, 381, 383, 385, 387, 
	389, 391, 393, 395, 397, 399, 401, 403, 
	405, 407, 409, 411, 413, 415, 417, 419, 
	421, 423, 425, 427, 429, 431, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 499, 
	501, 503, 505, 507, 509, 511, 513, 515, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	533, 535, 537, 539, 541, 543, 545, 547, 
	549, 551, 553, 555, 557, 559, 561, 563, 
	565, 567, 569, 571, 573, 575, 577, 579, 
	581, 583, 585, 587, 589, 591, 593, 595, 
	597, 599, 601, 603, 605, 607, 609, 611, 
	613, 615, 617, 619, 621, 623, 625, 627, 
	629, 631, 633, 635, 637, 639, 641, 643, 
	645, 647, 649, 651, 653, 655, 657, 659, 
	661, 663, 665, 667, 669, 671, 673, 675, 
	677, 679, 681, 683, 685, 687, 689, 691, 
	693, 695, 697, 699, 701, 703, 705, 707, 
	709, 711, 713, 715, 717, 719, 721, 723, 
	725, 727, 729, 731, 733, 735, 737, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 761, 763, 765, 767, 769, 771, 
	773, 775, 777, 779, 781, 783, 785, 787, 
	789, 791, 793, 795, 797, 799, 801, 803, 
	805, 807, 809, 811, 813, 815, 817, 819, 
	821, 823, 825, 827, 829, 831, 833, 835, 
	837, 839, 841, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 891, 893, 895, 897, 899, 
	901, 903, 905, 907, 909, 911, 913, 915, 
	917, 919, 921, 923, 925, 927, 929, 931, 
	933, 935, 937, 939, 941, 943, 945, 947, 
	949, 951, 953, 955, 957, 959, 961, 963, 
	965, 967, 969, 971, 973, 975, 977, 979, 
	981, 983, 985, 987, 989, 991, 993, 995, 
	997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 
	1013, 1015, 1017, 1019, 1021, 1023, 1025
};

unsigned int Parser6_actions[] = {
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 110, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 290, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 110, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 378, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	702, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 2, 
	0, 7, 0, 10, 0, 15, 0, 18, 
	0, 83, 0, 87, 0, 91, 0, 95, 
	0, 99, 0, 103, 0, 106, 0, 107, 
	0, 115, 0, 119, 0, 123, 0, 127, 
	0, 131, 0, 135, 0, 139, 0, 143, 
	0, 147, 0, 151, 0, 154, 0, 159, 
	0, 163, 0, 167, 0, 170, 0, 174, 
	0, 179, 0, 182, 0, 187, 0, 191, 
	0, 195, 0, 199, 0, 203, 0, 207, 
	0, 211, 0, 215, 0, 218, 0, 222, 
	0, 227, 0, 231, 0, 235, 0, 251, 
	0, 255, 0, 258, 0, 262, 0, 266, 
	0, 271, 0, 275, 0, 279, 0, 283, 
	0, 287, 0, 290, 0, 295, 0, 299, 
	0, 303, 0, 307, 0, 311, 0, 315, 
	0, 319, 0, 322, 0, 327, 0, 330, 
	0, 335, 0, 339, 0, 343, 0, 347, 
	0, 351, 0, 355, 0, 359, 0, 363, 
	0, 367, 0, 371, 0, 375, 0, 378, 
	0, 382, 0, 386, 0, 390, 0, 394, 
	0, 399, 0, 403, 0, 407, 0, 411, 
	0, 415, 0, 419, 0, 423, 0, 427, 
	0, 431, 0, 435, 0, 439, 0, 443, 
	0, 447, 0, 451, 0, 455, 0, 459, 
	0, 463, 0, 467, 0, 471, 0, 475, 
	0, 479, 0, 483, 0, 487, 0, 491, 
	0, 495, 0, 499, 0, 503, 0, 507, 
	0, 511, 0, 515, 0, 519, 0, 523, 
	0, 527, 0, 531, 0, 535, 0, 539, 
	0, 543, 0, 547, 0, 551, 0, 555, 
	0, 559, 0, 563, 0, 567, 0, 571, 
	0, 575, 0, 579, 0, 583, 0, 587, 
	0, 591, 0, 595, 0, 599, 0, 603, 
	0, 607, 0, 611, 0, 615, 0, 619, 
	0, 623, 0, 627, 0, 631, 0, 635, 
	0, 639, 0, 643, 0, 647, 0, 651, 
	0, 655, 0, 659, 0, 663, 0, 667, 
	0, 671, 0, 675, 0, 679, 0, 683, 
	0, 687, 0, 691, 0, 694, 0, 698, 
	0, 702, 0, 707, 0, 711, 0, 714, 
	0, 719, 0, 723, 0, 727, 0, 731, 
	0, 734, 0, 739, 0, 743, 0, 747, 
	0, 751, 0, 755, 0, 759, 0, 763, 
	0, 767, 0, 771, 0, 775, 0, 779, 
	0, 783, 0, 787, 0, 791, 0, 795, 
	0, 799, 0, 802, 0, 806, 0, 810, 
	0, 811, 0, 815, 0, 819, 0, 823, 
	0, 827, 0, 831, 0, 835, 0, 838, 
	0, 839, 0, 842, 0, 843, 0, 847, 
	0, 851, 0, 855, 0, 859, 0, 862, 
	0, 867, 0, 870, 0, 875, 0, 879, 
	0, 883, 0, 887, 0, 891, 0, 894, 
	0, 898, 0, 903, 0, 907, 0, 910, 
	0, 915, 0, 919, 0, 923, 0, 927, 
	0, 931, 0, 935, 0, 939, 0, 943, 
	0, 947, 0, 951, 0, 955, 0, 959, 
	0, 963, 0, 967, 0, 971, 0, 975, 
	0, 979, 0, 983, 0, 987, 0, 991, 
	0, 995, 0, 999, 0, 1003, 0, 1007, 
	0, 1011, 0, 1015, 0, 1018, 0, 1023, 
	0, 1027, 0, 1031, 0, 1035, 0, 1039, 
	0, 1043, 0, 1047, 0, 1051, 0, 1055, 
	0, 1059, 0, 1063, 0, 1067, 0, 1071, 
	0, 1075, 0, 1079, 0, 1083, 0, 1087, 
	0, 1091, 0, 1095, 0, 1099, 0, 1102, 
	0, 1106, 0, 1110, 0, 1115, 0, 1118, 
	0, 1123, 0, 1127, 0, 23, 0, 27, 
	0, 31, 0, 35, 0, 39, 0, 43, 
	0, 47, 0, 51, 0, 55, 0, 59, 
	0, 63, 0, 67, 0, 71, 0, 75, 
	0, 79, 0, 239, 0, 243, 0, 1, 
	0, 247, 0
};

int Parser6_commitLen[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 3
};

char Parser6_prodLengths[] = {
	1, 3, 0, 2, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 4, 4, 4, 
	4, 1, 1, 0, 4, 5, 5, 3, 
	3, 1, 3, 3, 1, 5, 1, 1, 
	3, 1, 1, 0, 3, 0, 6, 4, 
	3, 4, 3, 3, 5, 2, 0, 1, 
	4, 2, 1, 1, 1, 3, 2, 1, 
	0, 3, 1, 3, 3, 3, 3, 1, 
	1, 2, 3, 3, 3, 3, 1, 3, 
	1, 3, 1, 3, 3, 7, 3, 4, 
	3, 3, 3, 3, 3, 7, 1, 1, 
	1, 1, 1, 1, 2, 1, 2, 1, 
	2, 1, 1, 1, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 3, 1, 3, 1, 1, 0, 1, 
	4, 3, 1, 1, 1, 2, 2, 1, 
	2, 2, 2, 2, 4, 5, 5, 6, 
	17, 13, 11, 1, 1, 2, 2, 1, 
	1, 1, 1, 3, 3, 3, 3, 3, 
	3, 1, 1, 1, 2, 1, 2, 0, 
	2, 1, 3, 3, 1, 1, 2, 0, 
	1, 3, 2, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	3, 4, 3, 4, 3, 4, 2, 2, 
	3, 4, 2, 2, 1, 2, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 2, 0, 2, 1, 0, 
	3, 1, 1
};

unsigned short Parser6_prodLhsIds[] = {
	238, 237, 237, 239, 239, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 255, 251, 252, 253, 
	254, 257, 258, 258, 250, 241, 242, 262, 
	263, 263, 264, 265, 265, 243, 259, 267, 
	268, 268, 269, 269, 270, 270, 244, 245, 
	245, 246, 247, 248, 249, 273, 273, 261, 
	261, 274, 274, 275, 275, 275, 276, 276, 
	276, 260, 260, 279, 279, 279, 279, 279, 
	266, 280, 280, 280, 280, 280, 280, 281, 
	281, 282, 282, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 285, 
	285, 285, 285, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 289, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	277, 277, 277, 297, 297, 298, 298, 296, 
	296, 278, 287, 286, 299, 299, 299, 294, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 300, 301, 301, 301, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 305, 305, 271, 271, 271, 304, 304, 
	306, 306, 307, 307, 307, 307, 303, 303, 
	308, 308, 256, 256, 309, 309, 309, 312, 
	312, 312, 312, 312, 312, 310, 310, 310, 
	310, 310, 310, 310, 310, 310, 310, 310, 
	310, 310, 310, 310, 310, 272, 272, 315, 
	315, 315, 311, 311, 311, 311, 311, 311, 
	311, 316, 316, 316, 316, 316, 313, 313, 
	313, 313, 313, 283, 317, 314, 319, 319, 
	318, 318, 320
};

const char *Parser6_prodNames[] = {
	"start-1",
	"section_list-1",
	"section_list-2",
	"statement_list-1",
	"statement_list-2",
	"statement-1",
	"statement-2",
	"statement-3",
	"statement-4",
	"statement-5",
	"statement-6",
	"statement-7",
	"statement-8",
	"statement-9",
	"statement-10",
	"statement-11",
	"statement-12",
	"statement-13",
	"statement-14",
	"statement-15",
	"length_spec-1",
	"pre_push_spec-1",
	"post_pop_spec-1",
	"nfa_pre_push_spec-1",
	"nfa_post_pop_spec-1",
	"export_open-1",
	"opt_export-1",
	"opt_export-2",
	"export_block-1",
	"assignment-1",
	"instantiation-1",
	"nfa_round_spec-1",
	"nfa_round_list-1",
	"nfa_round_list-2",
	"nfa_rounds-1",
	"nfa_expr-1",
	"nfa_expr-2",
	"nfa_union-1",
	"machine_name-1",
	"action_param-1",
	"action_param_list-1",
	"action_param_list-2",
	"opt_action_param_list-1",
	"opt_action_param_list-2",
	"opt_action_params-1",
	"opt_action_params-2",
	"action_spec-1",
	"alphtype_spec-1",
	"alphtype_spec-2",
	"range_spec-1",
	"getkey_spec-1",
	"access_spec-1",
	"variable_spec-1",
	"opt_whitespace-1",
	"opt_whitespace-2",
	"join_or_lm-1",
	"join_or_lm-2",
	"lm_part_list-1",
	"lm_part_list-2",
	"longest_match_part-1",
	"longest_match_part-2",
	"longest_match_part-3",
	"opt_lm_part_action-1",
	"opt_lm_part_action-2",
	"opt_lm_part_action-3",
	"join-1",
	"join-2",
	"expression-1",
	"expression-2",
	"expression-3",
	"expression-4",
	"expression-5",
	"term_short-1",
	"term-1",
	"term-2",
	"term-3",
	"term-4",
	"term-5",
	"term-6",
	"factor_with_label-1",
	"factor_with_label-2",
	"factor_with_ep-1",
	"factor_with_ep-2",
	"factor_with_aug-1",
	"factor_with_aug-2",
	"factor_with_aug-3",
	"factor_with_aug-4",
	"factor_with_aug-5",
	"factor_with_aug-6",
	"factor_with_aug-7",
	"factor_with_aug-8",
	"factor_with_aug-9",
	"factor_with_aug-10",
	"factor_with_aug-11",
	"factor_with_aug-12",
	"aug_type_base-1",
	"aug_type_base-2",
	"aug_type_base-3",
	"aug_type_base-4",
	"aug_type_cond-1",
	"aug_type_cond-2",
	"aug_type_cond-3",
	"aug_type_cond-4",
	"aug_type_cond-5",
	"aug_type_cond-6",
	"aug_type_cond-7",
	"aug_type_cond-8",
	"aug_type_cond-9",
	"aug_type_to_state-1",
	"aug_type_to_state-2",
	"aug_type_to_state-3",
	"aug_type_to_state-4",
	"aug_type_to_state-5",
	"aug_type_to_state-6",
	"aug_type_to_state-7",
	"aug_type_to_state-8",
	"aug_type_to_state-9",
	"aug_type_to_state-10",
	"aug_type_to_state-11",
	"aug_type_to_state-12",
	"aug_type_from_state-1",
	"aug_type_from_state-2",
	"aug_type_from_state-3",
	"aug_type_from_state-4",
	"aug_type_from_state-5",
	"aug_type_from_state-6",
	"aug_type_from_state-7",
	"aug_type_from_state-8",
	"aug_type_from_state-9",
	"aug_type_from_state-10",
	"aug_type_from_state-11",
	"aug_type_from_state-12",
	"aug_type_eof-1",
	"aug_type_eof-2",
	"aug_type_eof-3",
	"aug_type_eof-4",
	"aug_type_eof-5",
	"aug_type_eof-6",
	"aug_type_eof-7",
	"aug_type_eof-8",
	"aug_type_eof-9",
	"aug_type_eof-10",
	"aug_type_eof-11",
	"aug_type_eof-12",
	"aug_type_gbl_error-1",
	"aug_type_gbl_error-2",
	"aug_type_gbl_error-3",
	"aug_type_gbl_error-4",
	"aug_type_gbl_error-5",
	"aug_type_gbl_error-6",
	"aug_type_gbl_error-7",
	"aug_type_gbl_error-8",
	"aug_type_gbl_error-9",
	"aug_type_gbl_error-10",
	"aug_type_gbl_error-11",
	"aug_type_gbl_error-12",
	"aug_type_local_error-1",
	"aug_type_local_error-2",
	"aug_type_local_error-3",
	"aug_type_local_error-4",
	"aug_type_local_error-5",
	"aug_type_local_error-6",
	"aug_type_local_error-7",
	"aug_type_local_error-8",
	"aug_type_local_error-9",
	"aug_type_local_error-10",
	"aug_type_local_error-11",
	"aug_type_local_error-12",
	"action_embed-1",
	"action_embed-2",
	"action_embed-3",
	"action_arg_list-1",
	"action_arg_list-2",
	"opt_action_arg_list-1",
	"opt_action_arg_list-2",
	"named_action_ref-1",
	"named_action_ref-2",
	"action_embed_block-1",
	"priority_name-1",
	"priority_aug-1",
	"priority_aug_num-1",
	"priority_aug_num-2",
	"priority_aug_num-3",
	"local_err_name-1",
	"factor_with_rep-1",
	"factor_with_rep-2",
	"factor_with_rep-3",
	"factor_with_rep-4",
	"factor_with_rep-5",
	"factor_with_rep-6",
	"factor_with_rep-7",
	"factor_with_rep-8",
	"factor_with_rep-9",
	"factor_with_rep-10",
	"factor_with_rep-11",
	"factor_with_rep-12",
	"factor_rep_num-1",
	"factor_with_neg-1",
	"factor_with_neg-2",
	"factor_with_neg-3",
	"factor-1",
	"factor-2",
	"factor-3",
	"factor-4",
	"factor-5",
	"factor-6",
	"factor-7",
	"factor-8",
	"factor-9",
	"range_lit-1",
	"range_lit-2",
	"alphabet_num-1",
	"alphabet_num-2",
	"alphabet_num-3",
	"regular_expr-1",
	"regular_expr-2",
	"regular_expr_item-1",
	"regular_expr_item-2",
	"regular_expr_char-1",
	"regular_expr_char-2",
	"regular_expr_char-3",
	"regular_expr_char-4",
	"regular_expr_or_data-1",
	"regular_expr_or_data-2",
	"regular_expr_or_char-1",
	"regular_expr_or_char-2",
	"inline_block-1",
	"inline_block-2",
	"inline_block_item-1",
	"inline_block_item-2",
	"inline_block_item-3",
	"inline_block_symbol-1",
	"inline_block_symbol-2",
	"inline_block_symbol-3",
	"inline_block_symbol-4",
	"inline_block_symbol-5",
	"inline_block_symbol-6",
	"inline_block_interpret-1",
	"inline_block_interpret-2",
	"inline_block_interpret-3",
	"inline_block_interpret-4",
	"inline_block_interpret-5",
	"inline_block_interpret-6",
	"inline_block_interpret-7",
	"inline_block_interpret-8",
	"inline_block_interpret-9",
	"inline_block_interpret-10",
	"inline_block_interpret-11",
	"inline_block_interpret-12",
	"inline_block_interpret-13",
	"inline_block_interpret-14",
	"inline_block_interpret-15",
	"inline_block_interpret-16",
	"inline_expr-1",
	"inline_expr-2",
	"inline_expr_item-1",
	"inline_expr_item-2",
	"inline_expr_item-3",
	"inline_expr_any-1",
	"inline_expr_any-2",
	"inline_expr_any-3",
	"inline_expr_any-4",
	"inline_expr_any-5",
	"inline_expr_any-6",
	"inline_expr_any-7",
	"inline_expr_symbol-1",
	"inline_expr_symbol-2",
	"inline_expr_symbol-3",
	"inline_expr_symbol-4",
	"inline_expr_symbol-5",
	"inline_expr_interpret-1",
	"inline_expr_interpret-2",
	"inline_expr_interpret-3",
	"inline_expr_interpret-4",
	"inline_expr_interpret-5",
	"local_state_ref-1",
	"no_name_sep-1",
	"state_ref-1",
	"opt_name_sep-1",
	"opt_name_sep-2",
	"state_ref_names-1",
	"state_ref_names-2",
	"_start-1"
};

const char *Parser6_lelNames[] = {
	"D-0",
	"D-1",
	"D-2",
	"D-3",
	"D-4",
	"D-5",
	"D-6",
	"D-7",
	"D-8",
	"D-9",
	"D-10",
	"D-11",
	"D-12",
	"D-13",
	"D-14",
	"D-15",
	"D-16",
	"D-17",
	"D-18",
	"D-19",
	"D-20",
	"D-21",
	"D-22",
	"D-23",
	"D-24",
	"D-25",
	"D-26",
	"D-27",
	"D-28",
	"D-29",
	"D-30",
	"D-31",
	"D-32",
	"!",
	"\"",
	"#",
	"$",
	"%",
	"&",
	"'",
	"(",
	")",
	"*",
	"+",
	",",
	"-",
	".",
	"/",
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	":",
	";",
	"<",
	"=",
	">",
	"?",
	"@",
	"A",
	"B",
	"C",
	"D",
	"E",
	"F",
	"G",
	"H",
	"I",
	"J",
	"K",
	"L",
	"M",
	"N",
	"O",
	"P",
	"Q",
	"R",
	"S",
	"T",
	"U",
	"V",
	"W",
	"X",
	"Y",
	"Z",
	"[",
	"\\",
	"]",
	"^",
	"_",
	"`",
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h",
	"i",
	"j",
	"k",
	"l",
	"m",
	"n",
	"o",
	"p",
	"q",
	"r",
	"s",
	"t",
	"u",
	"v",
	"w",
	"x",
	"y",
	"z",
	"{",
	"|",
	"}",
	"~",
	"D-127",
	"TK_Word",
	"TK_Literal",
	"TK_EndSection",
	"TK_UInt",
	"TK_Hex",
	"TK_DotDot",
	"TK_ColonGt",
	"TK_ColonGtGt",
	"TK_LtColon",
	"TK_Arrow",
	"TK_DoubleArrow",
	"TK_StarStar",
	"TK_ColonEquals",
	"TK_BarEquals",
	"TK_NameSep",
	"TK_BarStar",
	"TK_DashDash",
	"TK_DotDotIndep",
	"TK_StartCond",
	"TK_AllCond",
	"TK_LeavingCond",
	"TK_Middle",
	"TK_StartGblError",
	"TK_AllGblError",
	"TK_FinalGblError",
	"TK_NotFinalGblError",
	"TK_NotStartGblError",
	"TK_MiddleGblError",
	"TK_StartLocalError",
	"TK_AllLocalError",
	"TK_FinalLocalError",
	"TK_NotFinalLocalError",
	"TK_NotStartLocalError",
	"TK_MiddleLocalError",
	"TK_StartEOF",
	"TK_AllEOF",
	"TK_FinalEOF",
	"TK_NotFinalEOF",
	"TK_NotStartEOF",
	"TK_MiddleEOF",
	"TK_StartToState",
	"TK_AllToState",
	"TK_FinalToState",
	"TK_NotFinalToState",
	"TK_NotStartToState",
	"TK_MiddleToState",
	"TK_StartFromState",
	"TK_AllFromState",
	"TK_FinalFromState",
	"TK_NotFinalFromState",
	"TK_NotStartFromState",
	"TK_MiddleFromState",
	"TK_ColonNfaOpen",
	"TK_CloseColon",
	"TK_ColonCondOpen",
	"TK_ColonNoMaxOpen",
	"RE_Slash",
	"RE_SqOpen",
	"RE_SqOpenNeg",
	"RE_SqClose",
	"RE_Dot",
	"RE_Star",
	"RE_Dash",
	"RE_Char",
	"IL_WhiteSpace",
	"IL_Comment",
	"IL_Literal",
	"IL_Symbol",
	"KW_Machine",
	"KW_Include",
	"KW_Import",
	"KW_Write",
	"KW_Action",
	"KW_AlphType",
	"KW_Range",
	"KW_GetKey",
	"KW_InWhen",
	"KW_When",
	"KW_OutWhen",
	"KW_Eof",
	"KW_Err",
	"KW_Lerr",
	"KW_To",
	"KW_From",
	"KW_Export",
	"KW_PrePush",
	"KW_PostPop",
	"KW_Length",
	"KW_NfaPrePush",
	"KW_NfaPostPop",
	"KW_Break",
	"KW_Exec",
	"KW_Hold",
	"KW_PChar",
	"KW_Char",
	"KW_Goto",
	"KW_Call",
	"KW_Ret",
	"KW_CurState",
	"KW_TargState",
	"KW_Entry",
	"KW_Next",
	"KW_Variable",
	"KW_Access",
	"KW_Ncall",
	"KW_Nret",
	"KW_Nbreak",
	"TK_SubstRef",
	"Parser6_tk_eof",
	"section_list",
	"start",
	"statement_list",
	"statement",
	"assignment",
	"instantiation",
	"nfa_union",
	"action_spec",
	"alphtype_spec",
	"range_spec",
	"getkey_spec",
	"access_spec",
	"variable_spec",
	"export_block",
	"pre_push_spec",
	"post_pop_spec",
	"nfa_pre_push_spec",
	"nfa_post_pop_spec",
	"length_spec",
	"inline_block",
	"export_open",
	"opt_export",
	"machine_name",
	"join",
	"join_or_lm",
	"nfa_round_spec",
	"nfa_round_list",
	"nfa_rounds",
	"nfa_expr",
	"term_short",
	"action_param",
	"action_param_list",
	"opt_action_param_list",
	"opt_action_params",
	"alphabet_num",
	"inline_expr",
	"opt_whitespace",
	"lm_part_list",
	"longest_match_part",
	"opt_lm_part_action",
	"action_embed",
	"action_embed_block",
	"expression",
	"term",
	"factor_with_label",
	"factor_with_ep",
	"local_state_ref",
	"factor_with_aug",
	"aug_type_base",
	"priority_aug",
	"priority_name",
	"aug_type_cond",
	"aug_type_to_state",
	"aug_type_from_state",
	"aug_type_eof",
	"aug_type_gbl_error",
	"aug_type_local_error",
	"local_err_name",
	"factor_with_rep",
	"named_action_ref",
	"action_arg_list",
	"opt_action_arg_list",
	"priority_aug_num",
	"factor_rep_num",
	"factor_with_neg",
	"factor",
	"regular_expr_or_data",
	"regular_expr",
	"range_lit",
	"regular_expr_item",
	"regular_expr_char",
	"regular_expr_or_char",
	"inline_block_item",
	"inline_block_interpret",
	"inline_expr_any",
	"inline_block_symbol",
	"inline_expr_interpret",
	"state_ref",
	"inline_expr_item",
	"inline_expr_symbol",
	"no_name_sep",
	"state_ref_names",
	"opt_name_sep",
	"_start"
};

#line 1799 "rlparse.kl"


void Parser6::init()
{
	#line 5477 "rlparse.cc"
	curs = Parser6_startState;
	pool = 0;
	block = (struct Parser6_Block*) malloc( sizeof(struct Parser6_Block) );
	block->next = 0;
	freshEl = block->data;
	#ifdef KELBT_LOG_ACTIONS
	cerr << "allocating 8128 LangEls" << endl;
	#endif
	stackTop = freshEl;
	stackTop->type = 0;
	stackTop->state = -1;
	stackTop->next = 0;
	stackTop->child = 0;
	stackTop->causeReduce = 0;
	freshPos = 1;
	lastFinal = stackTop;
	numRetry = 0;
	numNodes = 0;
	errCount = 0;
#line 1804 "rlparse.kl"
}

int Parser6::parseLangEl( int type, const Token *token )
{
	#line 5502 "rlparse.cc"
#define reject() induceReject = 1

	int pos, targState;
	unsigned int *action;
	int rhsLen;
	struct Parser6_LangEl *rhs[32];
	struct Parser6_LangEl *lel = 0;
	struct Parser6_LangEl *input = 0;
	struct Parser6_LangEl *queue = 0;
	char induceReject;

	if ( curs < 0 )
		return 0;

	if ( pool == 0 ) {
		if ( freshPos == 8128 ) {
			struct Parser6_Block* newBlock  = (struct Parser6_Block*) malloc( sizeof(struct Parser6_Block) );
			newBlock->next = block;
			block = newBlock;
			freshEl = newBlock->data;
			#ifdef KELBT_LOG_ACTIONS
			cerr << "allocating 8128 LangEls" << endl;
			#endif
			freshPos = 0;
		}
		queue = freshEl + freshPos++;
	}
	else {
		queue = pool;
		pool = pool->next;
	}
	numNodes += 1;

	queue->type = type;
	queue->user.token = *token;
	queue->next = 0;
	queue->retry = 0;
	queue->child = 0;
	queue->causeReduce = 0;

again:
	if ( input == 0 ) {
		if ( queue == 0 )
			goto _out;

		input = queue;
		queue = queue->next;
		input->next = 0;
	}

	lel = input;
	if ( lel->type < Parser6_keys[curs<<1] || lel->type > Parser6_keys[(curs<<1)+1] )
		goto parseError;

	pos = Parser6_indicies[Parser6_offsets[curs] + (lel->type - Parser6_keys[curs<<1])];
	if ( pos < 0 )
		goto parseError;

	induceReject = 0;
	targState = Parser6_targs[pos];
	action = Parser6_actions + Parser6_actInds[pos];
	if ( lel->retry & 0x0000ffff )
		action += (lel->retry & 0x0000ffff);

	if ( *action & 0x1 ) {
		#ifdef KELBT_LOG_ACTIONS
		cerr << "shifted: " << Parser6_lelNames[lel->type];
		#endif
		input = input->next;
		lel->state = curs;
		lel->next = stackTop;
		stackTop = lel;

		if ( action[1] == 0 )
			lel->retry &= 0xffff0000;
		else {
			lel->retry += 1;
			numRetry += 1;
			#ifdef KELBT_LOG_ACTIONS
			cerr << " retry: " << stackTop;
			#endif
		}
		#ifdef KELBT_LOG_ACTIONS
		cerr << endl;
		#endif
	}

	if ( Parser6_commitLen[pos] != 0 ) {
		struct Parser6_LangEl *commitHead = stackTop, *lel;
		int sp = 0, doExec = 0;
		#ifdef KELBT_LOG_ACTIONS
		cerr << "commit encountered, executing final actions" << endl;
		#endif
		if ( Parser6_commitLen[pos] < 0 )
			commitHead = commitHead->next;

		lel = commitHead;

commit_head:
		if ( lel == lastFinal ) {
			doExec = 1;
			goto commit_base;
		}

		if ( lel->next != 0 ) {
			sp += 1;
			lel->next->prev = lel;
			lel = lel->next;
			lel->retry = 0;
			goto commit_head;
		}

commit_reverse:

		if ( lel->child != 0 ) {
			sp += 1;
			lel->child->prev = lel;
			lel = lel->child;
			lel->retry = 1;
			goto commit_head;
		}

commit_upwards:

		if ( doExec ) {
			if ( lel->type < 237 ) {
			}
			else {
				struct Parser6_LangEl *redLel = lel;
				if ( redLel->child != 0 ) {
					int r = Parser6_prodLengths[redLel->reduction] - 1;
					struct Parser6_LangEl *rhsEl = redLel->child;
					while ( rhsEl != 0 ) {
						rhs[r--] = rhsEl;
						rhsEl = rhsEl->next;
					}
				}
switch ( lel->reduction ) {
case 20: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[1]->user.token;
#line 81 "rlparse.kl"

		LengthDef *lengthDef = new LengthDef( (__ref0)->data );
		pd->lengthDefList.append( lengthDef );

		/* Generic creation of machine for instantiation and assignment. */
		MachineDef *machineDef = new MachineDef( lengthDef );
		tryMachineDef( (__ref1)->loc, (__ref2)->data, machineDef, false );
	

#line 5653 "rlparse.cc"
} break;
case 21: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 92 "rlparse.kl"

		if ( pd->prePushExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			error((__ref0)->loc) << "pre_push code already defined" << endl;
		}

		pd->prePushExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5669 "rlparse.cc"
} break;
case 22: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 104 "rlparse.kl"

		if ( pd->postPopExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			error((__ref0)->loc) << "post_pop code already defined" << endl;
		}

		pd->postPopExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5685 "rlparse.cc"
} break;
case 23: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 115 "rlparse.kl"

		if ( pd->nfaPrePushExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			error((__ref0)->loc) << "nfa_pre_push code already defined" << endl;
		}

		pd->nfaPrePushExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5701 "rlparse.cc"
} break;
case 24: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 126 "rlparse.kl"

		if ( pd->nfaPostPopExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			error((__ref0)->loc) << "nfa_post_pop code already defined" << endl;
		}

		pd->nfaPostPopExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5717 "rlparse.cc"
} break;
case 25: {
#line 136 "rlparse.kl"

		exportContext.append( true );
	

#line 5725 "rlparse.cc"
} break;
case 26: {
Parser6_Lel_opt_export *__ref0 = (Parser6_Lel_opt_export*)&redLel->user.opt_export;
#line 145 "rlparse.kl"
 (__ref0)->isSet = true; 

#line 5732 "rlparse.cc"
} break;
case 27: {
Parser6_Lel_opt_export *__ref0 = (Parser6_Lel_opt_export*)&redLel->user.opt_export;
#line 146 "rlparse.kl"
 (__ref0)->isSet = false; 

#line 5739 "rlparse.cc"
} break;
case 28: {
#line 149 "rlparse.kl"

		exportContext.remove( exportContext.length()-1 );
	

#line 5747 "rlparse.cc"
} break;
case 29: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_join *__ref2 = (Parser6_Lel_join*)&rhs[3]->user.join;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref4 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_opt_export *__ref5 = (Parser6_Lel_opt_export*)&rhs[0]->user.opt_export;
Parser6_Lel_join *__ref6 = (Parser6_Lel_join*)&rhs[3]->user.join;
Token *__ref7 = (Token*)&rhs[2]->user.token;
#line 154 "rlparse.kl"

		/* Main machine must be an instance. */
		bool isInstance = false;
		if ( strcmp((__ref0)->token.data, mainMachine) == 0 ) {
			warning((__ref1)->token.loc) << 
					"main machine will be implicitly instantiated" << endl;
			isInstance = true;
		}

		/* Generic creation of machine for instantiation and assignment. */
		MachineDef *machineDef = new MachineDef( (__ref2)->join );
		tryMachineDef( (__ref3)->token.loc, (__ref4)->token.data, machineDef, isInstance );

		if ( (__ref5)->isSet )
			exportContext.remove( exportContext.length()-1 );

		(__ref6)->join->loc = (__ref7)->loc;
	

#line 5778 "rlparse.cc"
} break;
case 30: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_join_or_lm *__ref2 = (Parser6_Lel_join_or_lm*)&rhs[3]->user.join_or_lm;
Parser6_Lel_opt_export *__ref3 = (Parser6_Lel_opt_export*)&rhs[0]->user.opt_export;
Parser6_Lel_join_or_lm *__ref4 = (Parser6_Lel_join_or_lm*)&rhs[3]->user.join_or_lm;
Parser6_Lel_join_or_lm *__ref5 = (Parser6_Lel_join_or_lm*)&rhs[3]->user.join_or_lm;
Token *__ref6 = (Token*)&rhs[2]->user.token;
#line 174 "rlparse.kl"

		/* Generic creation of machine for instantiation and assignment. */
		tryMachineDef( (__ref0)->token.loc, (__ref1)->token.data, (__ref2)->machineDef, true );

		if ( (__ref3)->isSet )
			exportContext.remove( exportContext.length()-1 );

		/* Pass a location to join_or_lm */
		if ( (__ref4)->machineDef->join != 0 )
			(__ref5)->machineDef->join->loc = (__ref6)->loc;
	

#line 5801 "rlparse.cc"
} break;
case 31: {
Parser6_Lel_nfa_round_spec *__ref0 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_nfa_round_spec *__ref2 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Token *__ref4 = (Token*)&rhs[0]->user.token;
Parser6_Lel_nfa_round_spec *__ref5 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref6 = (Token*)&rhs[2]->user.token;
Parser6_Lel_nfa_round_spec *__ref7 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref8 = (Token*)&rhs[2]->user.token;
Token *__ref9 = (Token*)&rhs[2]->user.token;
#line 194 "rlparse.kl"

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		(__ref0)->depth = strtol( (__ref1)->data, 0, 10 );
		if ( (__ref2)->depth == LONG_MAX && errno == ERANGE )
			error((__ref3)->loc) << "rounds " << (__ref4)->data << " overflows" << endl;

		(__ref5)->grouping = strtol( (__ref6)->data, 0, 10 );
		if ( (__ref7)->grouping == LONG_MAX && errno == ERANGE )
			error((__ref8)->loc) << "grouping " << (__ref9)->data << " overflows" << endl;
	

#line 5827 "rlparse.cc"
} break;
case 32: {
Parser6_Lel_nfa_round_list *__ref0 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_list *__ref1 = (Parser6_Lel_nfa_round_list*)&rhs[0]->user.nfa_round_list;
Parser6_Lel_nfa_round_list *__ref2 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_spec *__ref3 = (Parser6_Lel_nfa_round_spec*)&rhs[2]->user.nfa_round_spec;
Parser6_Lel_nfa_round_spec *__ref4 = (Parser6_Lel_nfa_round_spec*)&rhs[2]->user.nfa_round_spec;
#line 213 "rlparse.kl"

		(__ref0)->roundsList = (__ref1)->roundsList;
		(__ref2)->roundsList->append(
				NfaRound( (__ref3)->depth, (__ref4)->grouping ) );
	

#line 5842 "rlparse.cc"
} break;
case 33: {
Parser6_Lel_nfa_round_list *__ref0 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_list *__ref1 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_spec *__ref2 = (Parser6_Lel_nfa_round_spec*)&rhs[0]->user.nfa_round_spec;
Parser6_Lel_nfa_round_spec *__ref3 = (Parser6_Lel_nfa_round_spec*)&rhs[0]->user.nfa_round_spec;
#line 221 "rlparse.kl"

		(__ref0)->roundsList = new NfaRoundVect;
		(__ref1)->roundsList->append(
				NfaRound( (__ref2)->depth, (__ref3)->grouping ) );
	

#line 5856 "rlparse.cc"
} break;
case 34: {
Parser6_Lel_nfa_rounds *__ref0 = (Parser6_Lel_nfa_rounds*)&redLel->user.nfa_rounds;
Parser6_Lel_nfa_round_list *__ref1 = (Parser6_Lel_nfa_round_list*)&rhs[1]->user.nfa_round_list;
#line 234 "rlparse.kl"

		(__ref0)->roundsList = (__ref1)->roundsList;
	

#line 5866 "rlparse.cc"
} break;
case 35: {
Parser6_Lel_nfa_expr *__ref0 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_nfa_expr *__ref1 = (Parser6_Lel_nfa_expr*)&rhs[0]->user.nfa_expr;
Parser6_Lel_nfa_expr *__ref2 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_term_short *__ref3 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 244 "rlparse.kl"

		(__ref0)->nfaUnion = (__ref1)->nfaUnion;
		(__ref2)->nfaUnion->terms.append( (__ref3)->term );
	

#line 5879 "rlparse.cc"
} break;
case 36: {
Parser6_Lel_nfa_expr *__ref0 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_nfa_expr *__ref1 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[0]->user.term_short;
#line 249 "rlparse.kl"

		(__ref0)->nfaUnion = new NfaUnion();
		(__ref1)->nfaUnion->terms.append( (__ref2)->term );
	

#line 5891 "rlparse.cc"
} break;
case 37: {
Parser6_Lel_nfa_expr *__ref0 = (Parser6_Lel_nfa_expr*)&rhs[3]->user.nfa_expr;
Parser6_Lel_nfa_rounds *__ref1 = (Parser6_Lel_nfa_rounds*)&rhs[2]->user.nfa_rounds;
Parser6_Lel_nfa_expr *__ref2 = (Parser6_Lel_nfa_expr*)&rhs[3]->user.nfa_expr;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref4 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 255 "rlparse.kl"

		(__ref0)->nfaUnion->roundsList = (__ref1)->roundsList;
		MachineDef *machineDef = new MachineDef( (__ref2)->nfaUnion );

		/* Generic creation of machine for instantiation and assignment. */
		tryMachineDef( (__ref3)->token.loc, (__ref4)->token.data, machineDef, true );
	

#line 5908 "rlparse.cc"
} break;
case 38: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 272 "rlparse.kl"

		/* Make/get the priority key. The name may have already been referenced
		 * and therefore exist. */
		PriorDictEl *priorDictEl;
		if ( pd->priorDict.insert( (__ref0)->data, pd->nextPriorKey, &priorDictEl ) )
			pd->nextPriorKey += 1;
		pd->curDefPriorKey = priorDictEl->value;

		/* Make/get the local error key. */
		LocalErrDictEl *localErrDictEl;
		if ( pd->localErrDict.insert( (__ref1)->data, pd->nextLocalErrKey, &localErrDictEl ) )
			pd->nextLocalErrKey += 1;
		pd->curDefLocalErrKey = localErrDictEl->value;

		(__ref2)->token = *(__ref3);
	

#line 5933 "rlparse.cc"
} break;
case 39: {
Parser6_Lel_action_param *__ref0 = (Parser6_Lel_action_param*)&redLel->user.action_param;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 296 "rlparse.kl"

		(__ref0)->param = new ActionParam( (__ref1)->data );
	

#line 5943 "rlparse.cc"
} break;
case 40: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&rhs[0]->user.action_param_list;
Parser6_Lel_action_param_list *__ref2 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param *__ref3 = (Parser6_Lel_action_param*)&rhs[2]->user.action_param;
#line 307 "rlparse.kl"

		(__ref0)->paramList = (__ref1)->paramList;
		(__ref2)->paramList->append( (__ref3)->param );
	

#line 5956 "rlparse.cc"
} break;
case 41: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param *__ref2 = (Parser6_Lel_action_param*)&rhs[0]->user.action_param;
#line 314 "rlparse.kl"

		(__ref0)->paramList = new ActionParamList;
		(__ref1)->paramList->append( (__ref2)->param );
	

#line 5968 "rlparse.cc"
} break;
case 42: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&rhs[0]->user.action_param_list;
#line 323 "rlparse.kl"

		(__ref0)->paramList = (__ref1)->paramList;
	

#line 5978 "rlparse.cc"
} break;
case 43: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
#line 328 "rlparse.kl"

		(__ref0)->paramList = new ActionParamList;
	

#line 5987 "rlparse.cc"
} break;
case 44: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&rhs[1]->user.action_param_list;
Parser6_Lel_action_param_list *__ref2 = (Parser6_Lel_action_param_list*)&rhs[1]->user.action_param_list;
#line 339 "rlparse.kl"

		(__ref0)->paramList = (__ref1)->paramList;
		paramList = (__ref2)->paramList;
	

#line 5999 "rlparse.cc"
} break;
case 45: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
#line 345 "rlparse.kl"

		(__ref0)->paramList = 0;
	

#line 6008 "rlparse.cc"
} break;
case 46: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[1]->user.token;
Token *__ref3 = (Token*)&rhs[3]->user.token;
Token *__ref4 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref5 = (Parser6_Lel_inline_list*)&rhs[4]->user.inline_list;
Parser6_Lel_action_param_list *__ref6 = (Parser6_Lel_action_param_list*)&rhs[2]->user.action_param_list;
Parser6_Lel_action_param_list *__ref7 = (Parser6_Lel_action_param_list*)&rhs[2]->user.action_param_list;
#line 351 "rlparse.kl"

		if ( pd->actionDict.find( (__ref0)->data ) ) {
			/* Recover by just ignoring the duplicate. */
			error((__ref1)->loc) << "action \"" << (__ref2)->data << "\" already defined" << endl;
		}
		else {
			//std::cerr << "NEW ACTION " << $2->data << " " << $4->inlineList << std::endl;
			/* Add the action to the list of actions. */
			Action *newAction = new Action( (__ref3)->loc, (__ref4)->data, 
					(__ref5)->inlineList, pd->nextCondId++ );

			/* Insert to list and dict. */
			pd->actionList.append( newAction );
			pd->actionDict.insert( newAction );

			newAction->paramList = (__ref6)->paramList;
			if ( (__ref7)->paramList != 0 )
				newAction->argListMap = new ActionArgListMap;
		}
		parseSubstitutions = false;
	

#line 6042 "rlparse.cc"
} break;
case 47: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[2]->user.token;
Token *__ref3 = (Token*)&rhs[1]->user.token;
Token *__ref4 = (Token*)&rhs[1]->user.token;
Token *__ref5 = (Token*)&rhs[2]->user.token;
#line 376 "rlparse.kl"

		if ( ! pd->setAlphType( (__ref0)->loc, hostLang, (__ref1)->data, (__ref2)->data ) ) {
			// Recover by ignoring the alphtype statement.
			error((__ref3)->loc) << "\"" << (__ref4)->data << 
					" " << (__ref5)->data << "\" is not a valid alphabet type" << endl;
		}
	

#line 6060 "rlparse.cc"
} break;
case 48: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[1]->user.token;
Token *__ref3 = (Token*)&rhs[1]->user.token;
#line 385 "rlparse.kl"

		if ( ! pd->setAlphType( (__ref0)->loc, hostLang, (__ref1)->data ) ) {
			// Recover by ignoring the alphtype statement.
			error((__ref2)->loc) << "\"" << (__ref3)->data << 
					"\" is not a valid alphabet type" << endl;
		}
	

#line 6076 "rlparse.cc"
} break;
case 49: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[2]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&rhs[2]->user.token_type;
#line 395 "rlparse.kl"

		// Save the upper and lower ends of the range and emit the line number.
		pd->lowerNum = (__ref0)->token.data;
		pd->upperNum = (__ref1)->token.data;
		pd->rangeLowLoc = (__ref2)->token.loc;
		pd->rangeHighLoc = (__ref3)->token.loc;
	

#line 6092 "rlparse.cc"
} break;
case 50: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
#line 404 "rlparse.kl"

		pd->getKeyExpr = (__ref0)->inlineList;
	

#line 6101 "rlparse.cc"
} break;
case 51: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
#line 409 "rlparse.kl"

		pd->accessExpr = (__ref0)->inlineList;
	

#line 6110 "rlparse.cc"
} break;
case 52: {
Token *__ref0 = (Token*)&rhs[2]->user.token;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[3]->user.inline_list;
Token *__ref2 = (Token*)&rhs[2]->user.token;
#line 414 "rlparse.kl"

		/* FIXME: Need to implement the rest of this. */
		bool wasSet = pd->setVariable( (__ref0)->data, (__ref1)->inlineList );
		if ( !wasSet )
			error((__ref2)->loc) << "bad variable name" << endl;
	

#line 6124 "rlparse.cc"
} break;
case 55: {
Parser6_Lel_join_or_lm *__ref0 = (Parser6_Lel_join_or_lm*)&redLel->user.join_or_lm;
Parser6_Lel_join *__ref1 = (Parser6_Lel_join*)&rhs[0]->user.join;
#line 434 "rlparse.kl"

		(__ref0)->machineDef = new MachineDef( (__ref1)->join );
	

#line 6134 "rlparse.cc"
} break;
case 56: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_lm_part_list *__ref1 = (Parser6_Lel_lm_part_list*)&rhs[1]->user.lm_part_list;
Parser6_Lel_lm_part_list *__ref2 = (Parser6_Lel_lm_part_list*)&rhs[1]->user.lm_part_list;
Parser6_Lel_join_or_lm *__ref3 = (Parser6_Lel_join_or_lm*)&redLel->user.join_or_lm;
#line 438 "rlparse.kl"

		/* Create a new factor going to a longest match structure. Record
		 * in the parse data that we have a longest match. */
		LongestMatch *lm = new LongestMatch( (__ref0)->loc, (__ref1)->lmPartList );
		pd->lmList.append( lm );
		for ( LmPartList::Iter lmp = *((__ref2)->lmPartList); lmp.lte(); lmp++ )
			lmp->longestMatch = lm;
		(__ref3)->machineDef = new MachineDef( lm );
	

#line 6152 "rlparse.cc"
} break;
case 57: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&rhs[1]->user.longest_match_part;
Parser6_Lel_lm_part_list *__ref1 = (Parser6_Lel_lm_part_list*)&rhs[0]->user.lm_part_list;
Parser6_Lel_longest_match_part *__ref2 = (Parser6_Lel_longest_match_part*)&rhs[1]->user.longest_match_part;
Parser6_Lel_lm_part_list *__ref3 = (Parser6_Lel_lm_part_list*)&redLel->user.lm_part_list;
Parser6_Lel_lm_part_list *__ref4 = (Parser6_Lel_lm_part_list*)&rhs[0]->user.lm_part_list;
#line 455 "rlparse.kl"

		if ( (__ref0)->lmPart != 0 ) 
			(__ref1)->lmPartList->append( (__ref2)->lmPart );
		(__ref3)->lmPartList = (__ref4)->lmPartList;
	

#line 6167 "rlparse.cc"
} break;
case 58: {
Parser6_Lel_lm_part_list *__ref0 = (Parser6_Lel_lm_part_list*)&redLel->user.lm_part_list;
Parser6_Lel_longest_match_part *__ref1 = (Parser6_Lel_longest_match_part*)&rhs[0]->user.longest_match_part;
Parser6_Lel_lm_part_list *__ref2 = (Parser6_Lel_lm_part_list*)&redLel->user.lm_part_list;
Parser6_Lel_longest_match_part *__ref3 = (Parser6_Lel_longest_match_part*)&rhs[0]->user.longest_match_part;
#line 462 "rlparse.kl"

		/* Create a new list with the part. */
		(__ref0)->lmPartList = new LmPartList;
		if ( (__ref1)->lmPart != 0 )
			(__ref2)->lmPartList->append( (__ref3)->lmPart );
	

#line 6182 "rlparse.cc"
} break;
case 59: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
#line 476 "rlparse.kl"

		(__ref0)->lmPart = 0;
	

#line 6191 "rlparse.cc"
} break;
case 60: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
#line 481 "rlparse.kl"

		(__ref0)->lmPart = 0;
	

#line 6200 "rlparse.cc"
} break;
case 61: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
Parser6_Lel_opt_lm_part_action *__ref1 = (Parser6_Lel_opt_lm_part_action*)&rhs[1]->user.opt_lm_part_action;
Parser6_Lel_longest_match_part *__ref2 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
Parser6_Lel_join *__ref3 = (Parser6_Lel_join*)&rhs[0]->user.join;
Token *__ref4 = (Token*)&rhs[2]->user.token;
Parser6_Lel_join *__ref5 = (Parser6_Lel_join*)&rhs[0]->user.join;
Token *__ref6 = (Token*)&rhs[2]->user.token;
#line 486 "rlparse.kl"

		(__ref0)->lmPart = 0;
		Action *action = (__ref1)->action;
		if ( action != 0 )
			action->isLmAction = true;
		(__ref2)->lmPart = new LongestMatchPart( (__ref3)->join, action, 
				(__ref4)->loc, pd->nextLongestMatchId++ );

		/* Provide a location to join. Unfortunately We don't
		 * have the start of the join as in other occurances. Use the end. */
		(__ref5)->join->loc = (__ref6)->loc;
	

#line 6224 "rlparse.cc"
} break;
case 62: {
Parser6_Lel_opt_lm_part_action *__ref0 = (Parser6_Lel_opt_lm_part_action*)&redLel->user.opt_lm_part_action;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[1]->user.action_ref;
#line 505 "rlparse.kl"
 
		(__ref0)->action = (__ref1)->action;
	

#line 6234 "rlparse.cc"
} break;
case 63: {
Parser6_Lel_opt_lm_part_action *__ref0 = (Parser6_Lel_opt_lm_part_action*)&redLel->user.opt_lm_part_action;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 509 "rlparse.kl"

		(__ref0)->action = (__ref1)->action;
	

#line 6244 "rlparse.cc"
} break;
case 64: {
Parser6_Lel_opt_lm_part_action *__ref0 = (Parser6_Lel_opt_lm_part_action*)&redLel->user.opt_lm_part_action;
#line 513 "rlparse.kl"

		(__ref0)->action = 0;
	

#line 6253 "rlparse.cc"
} break;
case 65: {
Parser6_Lel_join *__ref0 = (Parser6_Lel_join*)&rhs[0]->user.join;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[2]->user.expression;
Parser6_Lel_join *__ref2 = (Parser6_Lel_join*)&redLel->user.join;
Parser6_Lel_join *__ref3 = (Parser6_Lel_join*)&rhs[0]->user.join;
#line 524 "rlparse.kl"

		/* Append the expression to the list and return it. */
		(__ref0)->join->exprList.append( (__ref1)->expression );
		(__ref2)->join = (__ref3)->join;
	

#line 6267 "rlparse.cc"
} break;
case 66: {
Parser6_Lel_join *__ref0 = (Parser6_Lel_join*)&redLel->user.join;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
#line 530 "rlparse.kl"

		(__ref0)->join = new Join( (__ref1)->expression );
	

#line 6277 "rlparse.cc"
} break;
case 67: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 540 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::OrType );
	

#line 6289 "rlparse.cc"
} break;
case 68: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 545 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::IntersectType );
	

#line 6301 "rlparse.cc"
} break;
case 69: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 550 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::SubtractType );
	

#line 6313 "rlparse.cc"
} break;
case 70: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 555 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::StrongSubtractType );
	

#line 6325 "rlparse.cc"
} break;
case 71: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_term_short *__ref1 = (Parser6_Lel_term_short*)&rhs[0]->user.term_short;
#line 560 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->term );
	

#line 6335 "rlparse.cc"
} break;
case 72: {
Parser6_Lel_term_short *__ref0 = (Parser6_Lel_term_short*)&redLel->user.term_short;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
#line 581 "rlparse.kl"

		(__ref0)->term = (__ref1)->term;
	

#line 6345 "rlparse.cc"
} break;
case 73: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[1]->user.factor_with_label;
#line 591 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug );
	

#line 6356 "rlparse.cc"
} break;
case 74: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 595 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug );
	

#line 6367 "rlparse.cc"
} break;
case 75: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 599 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug, Term::RightStartType );
	

#line 6378 "rlparse.cc"
} break;
case 76: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 603 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug, Term::RightFinishType );
	

#line 6389 "rlparse.cc"
} break;
case 77: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 607 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, 
				(__ref2)->factorWithAug, Term::LeftType );
	

#line 6401 "rlparse.cc"
} break;
case 78: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_factor_with_label *__ref1 = (Parser6_Lel_factor_with_label*)&rhs[0]->user.factor_with_label;
#line 612 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->factorWithAug );
	

#line 6411 "rlparse.cc"
} break;
case 79: {
Parser6_Lel_factor_with_label *__ref0 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_label *__ref3 = (Parser6_Lel_factor_with_label*)&redLel->user.factor_with_label;
Parser6_Lel_factor_with_label *__ref4 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 622 "rlparse.kl"
 
		/* Add the label to the list and pass the factor up. */
		(__ref0)->factorWithAug->labels.prepend( Label((__ref1)->loc, (__ref2)->data) );
		(__ref3)->factorWithAug = (__ref4)->factorWithAug; 
	

#line 6426 "rlparse.cc"
} break;
case 80: {
Parser6_Lel_factor_with_label *__ref0 = (Parser6_Lel_factor_with_label*)&redLel->user.factor_with_label;
Parser6_Lel_factor_with_ep *__ref1 = (Parser6_Lel_factor_with_ep*)&rhs[0]->user.factor_with_ep;
#line 628 "rlparse.kl"

		(__ref0)->factorWithAug = (__ref1)->factorWithAug;
	

#line 6436 "rlparse.cc"
} break;
case 81: {
Parser6_Lel_factor_with_ep *__ref0 = (Parser6_Lel_factor_with_ep*)&rhs[0]->user.factor_with_ep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_ep *__ref2 = (Parser6_Lel_factor_with_ep*)&redLel->user.factor_with_ep;
Parser6_Lel_factor_with_ep *__ref3 = (Parser6_Lel_factor_with_ep*)&rhs[0]->user.factor_with_ep;
#line 638 "rlparse.kl"
 
		/* Add the target to the list and return the factor object. */
		(__ref0)->factorWithAug->epsilonLinks.append( EpsilonLink( (__ref1)->loc, new NameRef(nameRef) ) );
		(__ref2)->factorWithAug = (__ref3)->factorWithAug; 
	

#line 6450 "rlparse.cc"
} break;
case 82: {
Parser6_Lel_factor_with_ep *__ref0 = (Parser6_Lel_factor_with_ep*)&redLel->user.factor_with_ep;
Parser6_Lel_factor_with_aug *__ref1 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 644 "rlparse.kl"

		(__ref0)->factorWithAug = (__ref1)->factorWithAug;
	

#line 6460 "rlparse.cc"
} break;
case 83: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 654 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( 
				ParserAction( (__ref1)->loc, (__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6478 "rlparse.cc"
} break;
case 84: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_priority_aug *__ref2 = (Parser6_Lel_priority_aug*)&rhs[2]->user.priority_aug;
Parser6_Lel_factor_with_aug *__ref3 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 662 "rlparse.kl"

		/* Append the named priority to the factorWithAug and pass it up. */
		(__ref0)->factorWithAug->priorityAugs.append( 
				PriorityAug( (__ref1)->augType, pd->curDefPriorKey, (__ref2)->priorityNum ) );
		(__ref3)->factorWithAug = (__ref4)->factorWithAug;
	

#line 6494 "rlparse.cc"
} break;
case 85: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_priority_name *__ref2 = (Parser6_Lel_priority_name*)&rhs[3]->user.priority_name;
Parser6_Lel_priority_aug *__ref3 = (Parser6_Lel_priority_aug*)&rhs[5]->user.priority_aug;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 669 "rlparse.kl"

		/* Append the priority using a default name. */
		(__ref0)->factorWithAug->priorityAugs.append( 
				PriorityAug( (__ref1)->augType, (__ref2)->priorityName, (__ref3)->priorityNum ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6511 "rlparse.cc"
} break;
case 86: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 676 "rlparse.kl"

		(__ref0)->factorWithAug->conditions.append( ConditionTest( (__ref1)->loc, 
				(__ref2)->augType, (__ref3)->action, true ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6527 "rlparse.cc"
} break;
case 87: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[3]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 682 "rlparse.kl"

		(__ref0)->factorWithAug->conditions.append( ConditionTest( (__ref1)->loc, 
				(__ref2)->augType, (__ref3)->action, false ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6543 "rlparse.cc"
} break;
case 88: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 688 "rlparse.kl"

		/* Append the action, pass it up. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc, 
				(__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6560 "rlparse.cc"
} break;
case 89: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 695 "rlparse.kl"

		/* Append the action, pass it up. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6577 "rlparse.cc"
} break;
case 90: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 702 "rlparse.kl"

		/* Append the action, pass it up. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6594 "rlparse.cc"
} break;
case 91: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 709 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, pd->curDefLocalErrKey, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6612 "rlparse.cc"
} break;
case 92: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 717 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc, 
				(__ref2)->augType, pd->curDefLocalErrKey, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6630 "rlparse.cc"
} break;
case 93: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_local_err_name *__ref3 = (Parser6_Lel_local_err_name*)&rhs[3]->user.local_err_name;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&rhs[5]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref6 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 725 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, (__ref3)->error_name, (__ref4)->action ) );
		(__ref5)->factorWithAug = (__ref6)->factorWithAug;
	

#line 6649 "rlparse.cc"
} break;
case 94: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_rep *__ref1 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 733 "rlparse.kl"

		(__ref0)->factorWithAug = new FactorWithAug( (__ref1)->factorWithRep );
	

#line 6659 "rlparse.cc"
} break;
case 95: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 746 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_finish; 

#line 6668 "rlparse.cc"
} break;
case 96: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 747 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6677 "rlparse.cc"
} break;
case 97: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 748 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6686 "rlparse.cc"
} break;
case 98: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 749 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6695 "rlparse.cc"
} break;
case 99: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 754 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6704 "rlparse.cc"
} break;
case 100: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 755 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6713 "rlparse.cc"
} break;
case 101: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 756 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6722 "rlparse.cc"
} break;
case 102: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 757 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6731 "rlparse.cc"
} break;
case 103: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 758 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6740 "rlparse.cc"
} break;
case 104: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 759 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6749 "rlparse.cc"
} break;
case 105: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 760 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6758 "rlparse.cc"
} break;
case 106: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 761 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6767 "rlparse.cc"
} break;
case 107: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 762 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6776 "rlparse.cc"
} break;
case 108: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 771 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_to_state; 

#line 6785 "rlparse.cc"
} break;
case 109: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 773 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_to_state; 

#line 6794 "rlparse.cc"
} break;
case 110: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 776 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_to_state; 

#line 6803 "rlparse.cc"
} break;
case 111: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 778 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_to_state; 

#line 6812 "rlparse.cc"
} break;
case 112: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 781 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_to_state; 

#line 6821 "rlparse.cc"
} break;
case 113: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 783 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_to_state; 

#line 6830 "rlparse.cc"
} break;
case 114: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 786 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_to_state; 

#line 6839 "rlparse.cc"
} break;
case 115: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 788 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_to_state; 

#line 6848 "rlparse.cc"
} break;
case 116: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 791 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_to_state; 

#line 6857 "rlparse.cc"
} break;
case 117: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 793 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_to_state; 

#line 6866 "rlparse.cc"
} break;
case 118: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 796 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_to_state; 

#line 6875 "rlparse.cc"
} break;
case 119: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 798 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_to_state; 

#line 6884 "rlparse.cc"
} break;
case 120: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 807 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_from_state; 

#line 6893 "rlparse.cc"
} break;
case 121: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 809 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_from_state; 

#line 6902 "rlparse.cc"
} break;
case 122: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 812 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_from_state; 

#line 6911 "rlparse.cc"
} break;
case 123: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 814 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_from_state; 

#line 6920 "rlparse.cc"
} break;
case 124: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 817 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_from_state; 

#line 6929 "rlparse.cc"
} break;
case 125: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 819 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_from_state; 

#line 6938 "rlparse.cc"
} break;
case 126: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 822 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_from_state; 

#line 6947 "rlparse.cc"
} break;
case 127: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 824 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_from_state; 

#line 6956 "rlparse.cc"
} break;
case 128: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 827 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_from_state; 

#line 6965 "rlparse.cc"
} break;
case 129: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 829 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_from_state; 

#line 6974 "rlparse.cc"
} break;
case 130: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 832 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_from_state; 

#line 6983 "rlparse.cc"
} break;
case 131: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 834 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_from_state; 

#line 6992 "rlparse.cc"
} break;
case 132: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 843 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_eof; 

#line 7001 "rlparse.cc"
} break;
case 133: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 845 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_eof; 

#line 7010 "rlparse.cc"
} break;
case 134: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 848 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_eof; 

#line 7019 "rlparse.cc"
} break;
case 135: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 850 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_eof; 

#line 7028 "rlparse.cc"
} break;
case 136: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 853 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_eof; 

#line 7037 "rlparse.cc"
} break;
case 137: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 855 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_eof; 

#line 7046 "rlparse.cc"
} break;
case 138: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 858 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_eof; 

#line 7055 "rlparse.cc"
} break;
case 139: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 860 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_eof; 

#line 7064 "rlparse.cc"
} break;
case 140: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 863 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_eof; 

#line 7073 "rlparse.cc"
} break;
case 141: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 865 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_eof; 

#line 7082 "rlparse.cc"
} break;
case 142: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 868 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_eof; 

#line 7091 "rlparse.cc"
} break;
case 143: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 870 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_eof; 

#line 7100 "rlparse.cc"
} break;
case 144: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 879 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_gbl_error; 

#line 7109 "rlparse.cc"
} break;
case 145: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 881 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_gbl_error; 

#line 7118 "rlparse.cc"
} break;
case 146: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 884 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_gbl_error; 

#line 7127 "rlparse.cc"
} break;
case 147: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 886 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_gbl_error; 

#line 7136 "rlparse.cc"
} break;
case 148: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 889 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_gbl_error; 

#line 7145 "rlparse.cc"
} break;
case 149: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 891 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_gbl_error; 

#line 7154 "rlparse.cc"
} break;
case 150: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 894 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_gbl_error; 

#line 7163 "rlparse.cc"
} break;
case 151: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 896 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_gbl_error; 

#line 7172 "rlparse.cc"
} break;
case 152: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 899 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_gbl_error; 

#line 7181 "rlparse.cc"
} break;
case 153: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 901 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_gbl_error; 

#line 7190 "rlparse.cc"
} break;
case 154: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 904 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_gbl_error; 

#line 7199 "rlparse.cc"
} break;
case 155: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 906 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_gbl_error; 

#line 7208 "rlparse.cc"
} break;
case 156: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 916 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_local_error; 

#line 7217 "rlparse.cc"
} break;
case 157: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 918 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_local_error; 

#line 7226 "rlparse.cc"
} break;
case 158: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 921 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_local_error; 

#line 7235 "rlparse.cc"
} break;
case 159: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 923 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_local_error; 

#line 7244 "rlparse.cc"
} break;
case 160: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 926 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_local_error; 

#line 7253 "rlparse.cc"
} break;
case 161: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 928 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_local_error; 

#line 7262 "rlparse.cc"
} break;
case 162: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 931 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_local_error; 

#line 7271 "rlparse.cc"
} break;
case 163: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 933 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_local_error; 

#line 7280 "rlparse.cc"
} break;
case 164: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 936 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_local_error; 

#line 7289 "rlparse.cc"
} break;
case 165: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 938 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_local_error; 

#line 7298 "rlparse.cc"
} break;
case 166: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 941 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_local_error; 

#line 7307 "rlparse.cc"
} break;
case 167: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 943 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_local_error; 

#line 7316 "rlparse.cc"
} break;
case 168: {
Parser6_Lel_action_ref *__ref0 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 956 "rlparse.kl"
 (__ref0)->action = (__ref1)->action; 

#line 7324 "rlparse.cc"
} break;
case 169: {
Parser6_Lel_action_ref *__ref0 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[1]->user.action_ref;
#line 957 "rlparse.kl"
 (__ref0)->action = (__ref1)->action; 

#line 7332 "rlparse.cc"
} break;
case 170: {
Parser6_Lel_action_ref *__ref0 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 958 "rlparse.kl"
 (__ref0)->action = (__ref1)->action; 

#line 7340 "rlparse.cc"
} break;
case 171: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref1 = (Parser6_Lel_action_arg_list*)&rhs[0]->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref2 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
#line 967 "rlparse.kl"

		(__ref0)->argList = (__ref1)->argList;
		(__ref2)->argList->append( (__ref3)->action );
	

#line 7353 "rlparse.cc"
} break;
case 172: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref1 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_ref *__ref2 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 973 "rlparse.kl"

		(__ref0)->argList = new ActionArgList;
		(__ref1)->argList->append( (__ref2)->action );
	

#line 7365 "rlparse.cc"
} break;
case 173: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref1 = (Parser6_Lel_action_arg_list*)&rhs[0]->user.action_arg_list;
#line 983 "rlparse.kl"

		(__ref0)->argList = (__ref1)->argList;
	

#line 7375 "rlparse.cc"
} break;
case 174: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
#line 987 "rlparse.kl"

		(__ref0)->argList = new ActionArgList;
	

#line 7384 "rlparse.cc"
} break;
case 176: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_arg_list *__ref5 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Token *__ref6 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref7 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_arg_list *__ref8 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_ref *__ref9 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_arg_list *__ref10 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref11 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_ref *__ref12 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 1034 "rlparse.kl"

		/* Make sure the number of actions line up. */
		if ( (__ref0)->argList->length() != (__ref1)->action->paramList->length() ) {
			error((__ref2)->loc) << "wrong number of action "
				"arguments for \"" << (__ref3)->data << "\"" << endl;
		}
				
		/* Now we need to specialize using the supplied args. We can only
		 * present an Action* to fsmcodegen. */
		ActionArgListMapEl *el = (__ref4)->action->argListMap->find( (__ref5)->argList );
		if ( el == 0 ) {
			/* Allocate an action representing this specialization. */
			Action *specAction = Action::cons( (__ref6)->loc, (__ref7)->action,
					(__ref8)->argList, pd->nextCondId++ );
			pd->actionList.append( specAction );

			el = (__ref9)->action->argListMap->insert( (__ref10)->argList, specAction );
		}
		else {
			/* Can delete $3->arg list. */
			delete (__ref11)->argList;
		}

		(__ref12)->action = el->value;
	

#line 7427 "rlparse.cc"
} break;
case 177: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
Parser6_Lel_action_ref *__ref2 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 1063 "rlparse.kl"

		/* Create the action, add it to the list and pass up. */
		Action *newAction = new Action( (__ref0)->loc, std::string(),
				(__ref1)->inlineList, pd->nextCondId++ );
		pd->actionList.append( newAction );
		(__ref2)->action = newAction;
	

#line 7442 "rlparse.cc"
} break;
case 178: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_priority_name *__ref1 = (Parser6_Lel_priority_name*)&redLel->user.priority_name;
#line 1079 "rlparse.kl"

		// Lookup/create the priority key.
		PriorDictEl *priorDictEl;
		if ( pd->priorDict.insert( (__ref0)->data, pd->nextPriorKey, &priorDictEl ) )
			pd->nextPriorKey += 1;

		// Use the inserted/found priority key.
		(__ref1)->priorityName = priorDictEl->value;
	

#line 7458 "rlparse.cc"
} break;
case 179: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_priority_aug *__ref3 = (Parser6_Lel_priority_aug*)&redLel->user.priority_aug;
Parser6_Lel_token_type *__ref4 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref5 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_priority_aug *__ref6 = (Parser6_Lel_priority_aug*)&redLel->user.priority_aug;
Parser6_Lel_priority_aug *__ref7 = (Parser6_Lel_priority_aug*)&redLel->user.priority_aug;
#line 1096 "rlparse.kl"

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		//std::cerr << "PRIOR AUG: " << $1->token.data << std::endl;
		long aug = strtol( (__ref0)->token.data, 0, 10 );
		if ( errno == ERANGE && aug == LONG_MAX ) {
			/* Priority number too large. Recover by setting the priority to 0. */
			error((__ref1)->token.loc) << "priority number " << (__ref2)->token.data << 
					" overflows" << endl;
			(__ref3)->priorityNum = 0;
		}
		else if ( errno == ERANGE && aug == LONG_MIN ) {
			/* Priority number too large in the neg. Recover by using 0. */
			error((__ref4)->token.loc) << "priority number " << (__ref5)->token.data << 
					" underflows" << endl;
			(__ref6)->priorityNum = 0;
		}
		else {
			/* No overflow or underflow. */
			(__ref7)->priorityNum = aug;
		}
	

#line 7493 "rlparse.cc"
} break;
case 180: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1122 "rlparse.kl"

		(__ref0)->token = *(__ref1);
	

#line 7503 "rlparse.cc"
} break;
case 181: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref4 = (Token*)&rhs[1]->user.token;
#line 1126 "rlparse.kl"

		(__ref0)->token.set( "+", 1 );
		(__ref1)->token.loc = (__ref2)->loc;
		(__ref3)->token.append( *(__ref4) );
	

#line 7518 "rlparse.cc"
} break;
case 182: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref4 = (Token*)&rhs[1]->user.token;
#line 1132 "rlparse.kl"

		(__ref0)->token.set( "-", 1 );
		(__ref1)->token.loc = (__ref2)->loc;
		(__ref3)->token.append( *(__ref4) );
	

#line 7533 "rlparse.cc"
} break;
case 183: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_local_err_name *__ref1 = (Parser6_Lel_local_err_name*)&redLel->user.local_err_name;
#line 1144 "rlparse.kl"

		/* Lookup/create the priority key. */
		LocalErrDictEl *localErrDictEl;
		if ( pd->localErrDict.insert( (__ref0)->data, pd->nextLocalErrKey, &localErrDictEl ) )
			pd->nextLocalErrKey += 1;

		/* Use the inserted/found priority key. */
		(__ref1)->error_name = localErrDictEl->value;
	

#line 7549 "rlparse.cc"
} break;
case 184: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1165 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::StarType );
	

#line 7561 "rlparse.cc"
} break;
case 185: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1170 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::StarStarType );
	

#line 7573 "rlparse.cc"
} break;
case 186: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1175 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::OptionalType );
	

#line 7585 "rlparse.cc"
} break;
case 187: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1180 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::PlusType );
	

#line 7597 "rlparse.cc"
} break;
case 188: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[2]->user.factor_rep_num;
#line 1185 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				(__ref3)->rep, 0, FactorWithRep::ExactType );
	

#line 7610 "rlparse.cc"
} break;
case 189: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[3]->user.factor_rep_num;
#line 1190 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, (__ref3)->rep, FactorWithRep::MaxType );
	

#line 7623 "rlparse.cc"
} break;
case 190: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[2]->user.factor_rep_num;
#line 1195 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep,
				(__ref3)->rep, 0, FactorWithRep::MinType );
	

#line 7636 "rlparse.cc"
} break;
case 191: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[2]->user.factor_rep_num;
Parser6_Lel_factor_rep_num *__ref4 = (Parser6_Lel_factor_rep_num*)&rhs[4]->user.factor_rep_num;
#line 1200 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				(__ref3)->rep, (__ref4)->rep, FactorWithRep::RangeType );
	

#line 7650 "rlparse.cc"
} break;
case 192: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref1 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_rep *__ref3 = (Parser6_Lel_factor_with_rep*)&rhs[3]->user.factor_with_rep;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&rhs[5]->user.action_ref;
Parser6_Lel_action_ref *__ref5 = (Parser6_Lel_action_ref*)&rhs[7]->user.action_ref;
Parser6_Lel_action_ref *__ref6 = (Parser6_Lel_action_ref*)&rhs[9]->user.action_ref;
Parser6_Lel_action_ref *__ref7 = (Parser6_Lel_action_ref*)&rhs[11]->user.action_ref;
Parser6_Lel_action_ref *__ref8 = (Parser6_Lel_action_ref*)&rhs[13]->user.action_ref;
Parser6_Lel_action_ref *__ref9 = (Parser6_Lel_action_ref*)&rhs[15]->user.action_ref;
#line 1208 "rlparse.kl"

		long long repId = strtoll( (__ref0)->data, 0, 10 );

		/* push, pop, ini, stay, repeat, exit */
		(__ref1)->factorWithRep = new FactorWithRep( (__ref2)->loc, repId, (__ref3)->factorWithRep,
				(__ref4)->action, (__ref5)->action, (__ref6)->action, (__ref7)->action, (__ref8)->action, (__ref9)->action,
				FactorWithRep::NfaRep );
	

#line 7673 "rlparse.cc"
} break;
case 193: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref1 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_rep *__ref3 = (Parser6_Lel_factor_with_rep*)&rhs[3]->user.factor_with_rep;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&rhs[5]->user.action_ref;
Parser6_Lel_action_ref *__ref5 = (Parser6_Lel_action_ref*)&rhs[7]->user.action_ref;
Parser6_Lel_action_ref *__ref6 = (Parser6_Lel_action_ref*)&rhs[9]->user.action_ref;
Parser6_Lel_action_ref *__ref7 = (Parser6_Lel_action_ref*)&rhs[11]->user.action_ref;
#line 1219 "rlparse.kl"

		long long repId = strtoll( (__ref0)->data, 0, 10 );

		/* ini, inc, min, max */
		(__ref1)->factorWithRep = new FactorWithRep( (__ref2)->loc, repId, (__ref3)->factorWithRep,
				(__ref4)->action, (__ref5)->action, (__ref6)->action, (__ref7)->action, 0, 0,
				FactorWithRep::CondRep );
	

#line 7694 "rlparse.cc"
} break;
case 194: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref1 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_rep *__ref3 = (Parser6_Lel_factor_with_rep*)&rhs[3]->user.factor_with_rep;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&rhs[5]->user.action_ref;
Parser6_Lel_action_ref *__ref5 = (Parser6_Lel_action_ref*)&rhs[7]->user.action_ref;
Parser6_Lel_action_ref *__ref6 = (Parser6_Lel_action_ref*)&rhs[9]->user.action_ref;
#line 1230 "rlparse.kl"

		long long repId = strtoll( (__ref0)->data, 0, 10 );

		/* ini, inc, min */
		(__ref1)->factorWithRep = new FactorWithRep( (__ref2)->loc, repId, (__ref3)->factorWithRep,
				(__ref4)->action, (__ref5)->action, (__ref6)->action, 0, 0, 0,
				FactorWithRep::NoMaxRep );
	

#line 7714 "rlparse.cc"
} break;
case 195: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Parser6_Lel_factor_with_neg *__ref1 = (Parser6_Lel_factor_with_neg*)&rhs[0]->user.factor_with_neg;
#line 1239 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->factorWithNeg );
	

#line 7724 "rlparse.cc"
} break;
case 196: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&redLel->user.factor_rep_num;
Parser6_Lel_factor_rep_num *__ref4 = (Parser6_Lel_factor_rep_num*)&redLel->user.factor_rep_num;
#line 1249 "rlparse.kl"

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		long rep = strtol( (__ref0)->data, 0, 10 );
		if ( errno == ERANGE && rep == LONG_MAX ) {
			// Repetition too large. Recover by returing repetition 1. */
			error((__ref1)->loc) << "repetition number " << (__ref2)->data << " overflows" << endl;
			(__ref3)->rep = 1;
		}
		else {
			// Cannot be negative, so no overflow.
			(__ref4)->rep = rep;
 		}
	

#line 7748 "rlparse.cc"
} break;
case 197: {
Parser6_Lel_factor_with_neg *__ref0 = (Parser6_Lel_factor_with_neg*)&redLel->user.factor_with_neg;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_neg *__ref2 = (Parser6_Lel_factor_with_neg*)&rhs[1]->user.factor_with_neg;
#line 1275 "rlparse.kl"

		(__ref0)->factorWithNeg = new FactorWithNeg( (__ref1)->loc,
				(__ref2)->factorWithNeg, FactorWithNeg::NegateType );
	

#line 7760 "rlparse.cc"
} break;
case 198: {
Parser6_Lel_factor_with_neg *__ref0 = (Parser6_Lel_factor_with_neg*)&redLel->user.factor_with_neg;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_neg *__ref2 = (Parser6_Lel_factor_with_neg*)&rhs[1]->user.factor_with_neg;
#line 1280 "rlparse.kl"

		(__ref0)->factorWithNeg = new FactorWithNeg( (__ref1)->loc,
				(__ref2)->factorWithNeg, FactorWithNeg::CharNegateType );
	

#line 7772 "rlparse.cc"
} break;
case 199: {
Parser6_Lel_factor_with_neg *__ref0 = (Parser6_Lel_factor_with_neg*)&redLel->user.factor_with_neg;
Parser6_Lel_factor *__ref1 = (Parser6_Lel_factor*)&rhs[0]->user.factor;
#line 1285 "rlparse.kl"

		(__ref0)->factorWithNeg = new FactorWithNeg( (__ref1)->factor );
	

#line 7782 "rlparse.cc"
} break;
case 200: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1295 "rlparse.kl"

		/* Create a new factor node going to a concat literal. */
		(__ref0)->factor = new Factor( new Literal( *(__ref1), Literal::LitString ) );
	

#line 7793 "rlparse.cc"
} break;
case 201: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1300 "rlparse.kl"

		/* Create a new factor node going to a literal number. */
		(__ref0)->factor = new Factor( new Literal( (__ref1)->token, Literal::Number ) );
	

#line 7804 "rlparse.cc"
} break;
case 202: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor *__ref3 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref4 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor *__ref5 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_factor *__ref6 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref7 = (Token*)&rhs[0]->user.token;
#line 1305 "rlparse.kl"

		/* Find the named graph. */
		GraphDictEl *gdNode = pd->graphDict.find( (__ref0)->data );
		if ( gdNode == 0 ) {
			/* Recover by returning null as the factor node. */
			error((__ref1)->loc) << "graph lookup of \"" << (__ref2)->data << "\" failed" << endl;
			(__ref3)->factor = 0;
		}
		else if ( gdNode->isInstance ) {
			/* Recover by retuning null as the factor node. */
			error((__ref4)->loc) << "references to graph instantiations not allowed "
					"in expressions" << endl;
			(__ref5)->factor = 0;
		}
		else {
			/* Create a factor node that is a lookup of an expression. */
			(__ref6)->factor = new Factor( (__ref7)->loc, gdNode->value );
		}
	

#line 7836 "rlparse.cc"
} break;
case 203: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1325 "rlparse.kl"

		/* Create a new factor node going to an OR expression. */
		(__ref0)->factor = new Factor( new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::OrBlock ) );
	

#line 7848 "rlparse.cc"
} break;
case 204: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1330 "rlparse.kl"

		/* Create a new factor node going to a negated OR expression. */
		(__ref0)->factor = new Factor( new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::NegOrBlock ) );
	

#line 7860 "rlparse.cc"
} break;
case 205: {
Token *__ref0 = (Token*)&rhs[2]->user.token;
Token *__ref1 = (Token*)&rhs[2]->user.token;
Parser6_Lel_regular_expr *__ref2 = (Parser6_Lel_regular_expr*)&rhs[1]->user.regular_expr;
Parser6_Lel_factor *__ref3 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_regular_expr *__ref4 = (Parser6_Lel_regular_expr*)&rhs[1]->user.regular_expr;
#line 1335 "rlparse.kl"

		if ( (__ref0)->length > 1 ) {
			for ( char *p = (__ref1)->data; *p != 0; p++ ) {
				if ( *p == 'i' )
					(__ref2)->regExpr->caseInsensitive = true;
			}
		}

		/* Create a new factor node going to a regular exp. */
		(__ref3)->factor = new Factor( (__ref4)->regExpr );
	

#line 7881 "rlparse.cc"
} break;
case 206: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_range_lit *__ref1 = (Parser6_Lel_range_lit*)&rhs[0]->user.range_lit;
Parser6_Lel_range_lit *__ref2 = (Parser6_Lel_range_lit*)&rhs[2]->user.range_lit;
#line 1347 "rlparse.kl"

		/* Create a new factor node going to a range. */
		(__ref0)->factor = new Factor( new Range( (__ref1)->literal, (__ref2)->literal, false ) );
	

#line 7893 "rlparse.cc"
} break;
case 207: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_range_lit *__ref1 = (Parser6_Lel_range_lit*)&rhs[0]->user.range_lit;
Parser6_Lel_range_lit *__ref2 = (Parser6_Lel_range_lit*)&rhs[2]->user.range_lit;
#line 1352 "rlparse.kl"

		/* Create a new factor node going to a range. */
		(__ref0)->factor = new Factor( new Range( (__ref1)->literal, (__ref2)->literal, true ) );
	

#line 7905 "rlparse.cc"
} break;
case 208: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_join *__ref1 = (Parser6_Lel_join*)&rhs[1]->user.join;
Parser6_Lel_join *__ref2 = (Parser6_Lel_join*)&rhs[1]->user.join;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 1357 "rlparse.kl"

		/* Create a new factor going to a parenthesized join. */
		(__ref0)->factor = new Factor( (__ref1)->join );
		(__ref2)->join->loc = (__ref3)->loc;
	

#line 7919 "rlparse.cc"
} break;
case 209: {
Parser6_Lel_range_lit *__ref0 = (Parser6_Lel_range_lit*)&redLel->user.range_lit;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1370 "rlparse.kl"

		/* Range literas must have only one char. We restrict this in the parse tree. */
		(__ref0)->literal = new Literal( *(__ref1), Literal::LitString );
	

#line 7930 "rlparse.cc"
} break;
case 210: {
Parser6_Lel_range_lit *__ref0 = (Parser6_Lel_range_lit*)&redLel->user.range_lit;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1375 "rlparse.kl"

		/* Create a new literal number. */
		(__ref0)->literal = new Literal( (__ref1)->token, Literal::Number );
	

#line 7941 "rlparse.cc"
} break;
case 211: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1384 "rlparse.kl"
 
		(__ref0)->token = *(__ref1);
	

#line 7951 "rlparse.cc"
} break;
case 212: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref4 = (Token*)&rhs[1]->user.token;
#line 1388 "rlparse.kl"
 
		(__ref0)->token.set( "-", 1 );
		(__ref1)->token.loc = (__ref2)->loc;
		(__ref3)->token.append( *(__ref4) );
	

#line 7966 "rlparse.cc"
} break;
case 213: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1394 "rlparse.kl"
 
		(__ref0)->token = *(__ref1);
	

#line 7976 "rlparse.cc"
} break;
case 214: {
Parser6_Lel_regular_expr_item *__ref0 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr_item *__ref1 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr *__ref2 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref3 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref4 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref5 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr_item *__ref6 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr_item *__ref7 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr *__ref8 = (Parser6_Lel_regular_expr*)&redLel->user.regular_expr;
Parser6_Lel_regular_expr *__ref9 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref10 = (Parser6_Lel_regular_expr*)&redLel->user.regular_expr;
Parser6_Lel_regular_expr *__ref11 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr_item *__ref12 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
#line 1409 "rlparse.kl"

		/* An optimization to lessen the tree size. If a non-starred char is
		 * directly under the left side on the right and the right side is
		 * another non-starred char then paste them together and return the
		 * left side. Otherwise just put the two under a new reg exp node. */
		if ( (__ref0)->reItem->type == ReItem::Data && !(__ref1)->reItem->star &&
			(__ref2)->regExpr->type == RegExpr::RecurseItem &&
			(__ref3)->regExpr->item->type == ReItem::Data && !(__ref4)->regExpr->item->star )
		{
			/* Append the right side to the right side of the left and toss the
			 * right side. */
			(__ref5)->regExpr->item->token.append( (__ref6)->reItem->token );
			delete (__ref7)->reItem;
			(__ref8)->regExpr = (__ref9)->regExpr;
		}
		else {
			(__ref10)->regExpr = new RegExpr( (__ref11)->regExpr, (__ref12)->reItem );
		}
	

#line 8013 "rlparse.cc"
} break;
case 215: {
Parser6_Lel_regular_expr *__ref0 = (Parser6_Lel_regular_expr*)&redLel->user.regular_expr;
#line 1429 "rlparse.kl"

		/* Can't optimize the tree. */
		(__ref0)->regExpr = new RegExpr();
	

#line 8023 "rlparse.cc"
} break;
case 216: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&rhs[0]->user.regular_expr_char;
Parser6_Lel_regular_expr_item *__ref1 = (Parser6_Lel_regular_expr_item*)&redLel->user.regular_expr_item;
Parser6_Lel_regular_expr_char *__ref2 = (Parser6_Lel_regular_expr_char*)&rhs[0]->user.regular_expr_char;
#line 1441 "rlparse.kl"

		(__ref0)->reItem->star = true;
		(__ref1)->reItem = (__ref2)->reItem;
	

#line 8035 "rlparse.cc"
} break;
case 217: {
Parser6_Lel_regular_expr_item *__ref0 = (Parser6_Lel_regular_expr_item*)&redLel->user.regular_expr_item;
Parser6_Lel_regular_expr_char *__ref1 = (Parser6_Lel_regular_expr_char*)&rhs[0]->user.regular_expr_char;
#line 1446 "rlparse.kl"

		(__ref0)->reItem = (__ref1)->reItem;
	

#line 8045 "rlparse.cc"
} break;
case 218: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1458 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::OrBlock );
	

#line 8056 "rlparse.cc"
} break;
case 219: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1462 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::NegOrBlock );
	

#line 8067 "rlparse.cc"
} break;
case 220: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1466 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, ReItem::Dot );
	

#line 8077 "rlparse.cc"
} break;
case 221: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
#line 1470 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, *(__ref2) );
	

#line 8088 "rlparse.cc"
} break;
case 222: {
Parser6_Lel_regular_expr_or_char *__ref0 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
Parser6_Lel_regular_expr_or_data *__ref1 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref3 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_char *__ref4 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
Parser6_Lel_regular_expr_or_char *__ref5 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
Parser6_Lel_regular_expr_or_data *__ref6 = (Parser6_Lel_regular_expr_or_data*)&redLel->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref7 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref8 = (Parser6_Lel_regular_expr_or_data*)&redLel->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref9 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_char *__ref10 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
#line 1482 "rlparse.kl"

		/* An optimization to lessen the tree size. If an or char is directly
		 * under the left side on the right and the right side is another or
		 * char then paste them together and return the left side. Otherwise
		 * just put the two under a new or data node. */
		if ( (__ref0)->reOrItem->type == ReOrItem::Data &&
				(__ref1)->reOrBlock->type == ReOrBlock::RecurseItem &&
				(__ref2)->reOrBlock->item->type == ReOrItem::Data )
		{
			/* Append the right side to right side of the left and toss the
			 * right side. */
			(__ref3)->reOrBlock->item->token.append( (__ref4)->reOrItem->token );
			delete (__ref5)->reOrItem;
			(__ref6)->reOrBlock = (__ref7)->reOrBlock;
		}
		else {
			/* Can't optimize, put the left and right under a new node. */
			(__ref8)->reOrBlock = new ReOrBlock( (__ref9)->reOrBlock, (__ref10)->reOrItem );
		}
	

#line 8124 "rlparse.cc"
} break;
case 223: {
Parser6_Lel_regular_expr_or_data *__ref0 = (Parser6_Lel_regular_expr_or_data*)&redLel->user.regular_expr_or_data;
#line 1503 "rlparse.kl"

		(__ref0)->reOrBlock = new ReOrBlock();
	

#line 8133 "rlparse.cc"
} break;
case 224: {
Parser6_Lel_regular_expr_or_char *__ref0 = (Parser6_Lel_regular_expr_or_char*)&redLel->user.regular_expr_or_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
#line 1515 "rlparse.kl"

		(__ref0)->reOrItem = new ReOrItem( (__ref1)->loc, *(__ref2) );
	

#line 8144 "rlparse.cc"
} break;
case 225: {
Parser6_Lel_regular_expr_or_char *__ref0 = (Parser6_Lel_regular_expr_or_char*)&redLel->user.regular_expr_or_char;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[2]->user.token;
#line 1519 "rlparse.kl"

		(__ref0)->reOrItem = new ReOrItem( (__ref1)->loc, (__ref2)->data[0], (__ref3)->data[0] );
	

#line 8156 "rlparse.cc"
} break;
case 226: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[0]->user.inline_list;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_item *__ref3 = (Parser6_Lel_inline_item*)&rhs[1]->user.inline_item;
#line 1536 "rlparse.kl"

		/* Append the item to the list, return the list. */
		(__ref0)->inlineList = (__ref1)->inlineList;
		(__ref2)->inlineList->append( (__ref3)->inlineItem );
	

#line 8170 "rlparse.cc"
} break;
case 227: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
#line 1543 "rlparse.kl"

		/* Start with empty list. */
		(__ref0)->inlineList = new InlineList;
	

#line 8180 "rlparse.cc"
} break;
case 228: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1558 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8191 "rlparse.cc"
} break;
case 229: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1564 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8202 "rlparse.cc"
} break;
case 230: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_item *__ref1 = (Parser6_Lel_inline_item*)&rhs[0]->user.inline_item;
#line 1570 "rlparse.kl"

		/* Pass the inline item up. */
		(__ref0)->inlineItem = (__ref1)->inlineItem;
	

#line 8213 "rlparse.cc"
} break;
case 231: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1577 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8221 "rlparse.cc"
} break;
case 232: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1578 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8229 "rlparse.cc"
} break;
case 233: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1579 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8237 "rlparse.cc"
} break;
case 234: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1580 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8245 "rlparse.cc"
} break;
case 235: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1581 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8253 "rlparse.cc"
} break;
case 236: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1582 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8261 "rlparse.cc"
} break;
case 237: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_item *__ref1 = (Parser6_Lel_inline_item*)&rhs[0]->user.inline_item;
#line 1586 "rlparse.kl"

		/* Pass up interpreted items of inline expressions. */
		(__ref0)->inlineItem = (__ref1)->inlineItem;
	

#line 8272 "rlparse.cc"
} break;
case 238: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1591 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Hold );
	

#line 8282 "rlparse.cc"
} break;
case 239: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
#line 1595 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Exec );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8295 "rlparse.cc"
} break;
case 240: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1600 "rlparse.kl"
 
		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, 
				new NameRef(nameRef), InlineItem::Goto );
	

#line 8306 "rlparse.cc"
} break;
case 241: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1605 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::GotoExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8319 "rlparse.cc"
} break;
case 242: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1610 "rlparse.kl"
 
		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, new NameRef(nameRef), InlineItem::Next );
	

#line 8329 "rlparse.cc"
} break;
case 243: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1614 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::NextExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8342 "rlparse.cc"
} break;
case 244: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1619 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, new NameRef(nameRef), InlineItem::Call );
	

#line 8352 "rlparse.cc"
} break;
case 245: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1623 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::CallExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8365 "rlparse.cc"
} break;
case 246: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1628 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Ret );
	

#line 8375 "rlparse.cc"
} break;
case 247: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1632 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Break );
	

#line 8385 "rlparse.cc"
} break;
case 248: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1636 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, new NameRef(nameRef),
				InlineItem::Ncall );
	

#line 8396 "rlparse.cc"
} break;
case 249: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1641 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::NcallExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8409 "rlparse.cc"
} break;
case 250: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1646 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Nret );
	

#line 8419 "rlparse.cc"
} break;
case 251: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1650 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Nbreak );
	

#line 8429 "rlparse.cc"
} break;
case 252: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Token *__ref4 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref5 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
#line 1654 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Subst );

		ActionParamList::Iter api = *paramList;
		for ( ; api.lte(); api++ ) {
			if ( (*api)->name == (__ref2)->data )
				break;
		}

		if ( api.end() )
			error( (__ref3)->loc ) << "invalid parameter reference \"$" << (__ref4)->data << "\"" << endl;
		else {
			(__ref5)->inlineItem->substPos = api.pos();
		}
	

#line 8455 "rlparse.cc"
} break;
case 253: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[0]->user.inline_list;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_item *__ref3 = (Parser6_Lel_inline_item*)&rhs[1]->user.inline_item;
#line 1675 "rlparse.kl"

		(__ref0)->inlineList = (__ref1)->inlineList;
		(__ref2)->inlineList->append( (__ref3)->inlineItem );
	

#line 8468 "rlparse.cc"
} break;
case 254: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
#line 1680 "rlparse.kl"

		/* Init the list used for this expr. */
		(__ref0)->inlineList = new InlineList;
	

#line 8478 "rlparse.cc"
} break;
case 255: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1689 "rlparse.kl"

		/* Return a text segment. */
		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8490 "rlparse.cc"
} break;
case 256: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1695 "rlparse.kl"

		/* Return a text segment, must heap alloc the text. */
		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8502 "rlparse.cc"
} break;
case 257: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_item *__ref1 = (Parser6_Lel_inline_item*)&rhs[0]->user.inline_item;
#line 1701 "rlparse.kl"

		/* Pass the inline item up. */
		(__ref0)->inlineItem = (__ref1)->inlineItem;
	

#line 8513 "rlparse.cc"
} break;
case 270: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1731 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::PChar );
	

#line 8523 "rlparse.cc"
} break;
case 271: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1736 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Char );
	

#line 8533 "rlparse.cc"
} break;
case 272: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1741 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Curs );
	

#line 8543 "rlparse.cc"
} break;
case 273: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1746 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Targs );
	

#line 8553 "rlparse.cc"
} break;
case 274: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1751 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, 
			new NameRef(nameRef), InlineItem::Entry );
	

#line 8564 "rlparse.cc"
} break;
case 276: {
#line 1762 "rlparse.kl"

		nameRef.empty();
	

#line 8572 "rlparse.cc"
} break;
case 278: {
#line 1772 "rlparse.kl"

		/* Insert an initial null pointer val to indicate the existence of the
		 * initial name seperator. */
		nameRef.setAs( 0 );
	

#line 8582 "rlparse.cc"
} break;
case 279: {
#line 1778 "rlparse.kl"

		nameRef.empty();
	

#line 8590 "rlparse.cc"
} break;
case 280: {
Token *__ref0 = (Token*)&rhs[2]->user.token;
#line 1785 "rlparse.kl"

		nameRef.append( (__ref0)->data );
	

#line 8599 "rlparse.cc"
} break;
case 281: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
#line 1790 "rlparse.kl"

		nameRef.append( (__ref0)->data );
	

#line 8608 "rlparse.cc"
} break;
}
			}

			if ( lel->child != 0 ) {
				struct Parser6_LangEl *first = lel->child;
				struct Parser6_LangEl *child = lel->child;
				lel->child = 0;
				while ( 1 ) {
					if ( child->type < 237 ) {
					}
					else {
					}
					numNodes -= 1;
					if ( child->next == 0 )
						break;
					child = child->next;
				}
				child->next = pool;
				pool = first;
			}
		}

commit_base:
		if ( sp > 0 ) {
			sp -= 1;
			if ( lel->retry == 0 ) {
				lel = lel->prev;
				goto commit_reverse;
			}
			else {
				lel->retry = 0;
				lel = lel->prev;
				goto commit_upwards;
			}
		}
		lel->retry = 0;

		lastFinal = lel;
		numRetry = 0;
	}

	if ( *action & 0x2 ) {
		int reduction = *action >> 2;
		struct Parser6_LangEl *redLel;

		if ( input != 0 )
			input->causeReduce += 1;

	if ( pool == 0 ) {
		if ( freshPos == 8128 ) {
			struct Parser6_Block* newBlock  = (struct Parser6_Block*) malloc( sizeof(struct Parser6_Block) );
			newBlock->next = block;
			block = newBlock;
			freshEl = newBlock->data;
			#ifdef KELBT_LOG_ACTIONS
			cerr << "allocating 8128 LangEls" << endl;
			#endif
			freshPos = 0;
		}
		redLel = freshEl + freshPos++;
	}
	else {
		redLel = pool;
		pool = pool->next;
	}
	numNodes += 1;

		redLel->type = Parser6_prodLhsIds[reduction];
		redLel->reduction = reduction;
		redLel->child = 0;
		redLel->next = 0;
		redLel->retry = (lel->retry << 16);
		redLel->causeReduce = 0;
		lel->retry &= 0xffff0000;

		rhsLen = Parser6_prodLengths[reduction];
		if ( rhsLen > 0 ) {
			int r;
			for ( r = rhsLen-1; r > 0; r-- ) {
				rhs[r] = stackTop;
				stackTop = stackTop->next;
			}
			rhs[0] = stackTop;
			stackTop = stackTop->next;
			rhs[0]->next = 0;
		}
switch ( reduction ) {
case 44: {
#line 336 "rlparse.kl"

		parseSubstitutions = true;
	

#line 8703 "rlparse.cc"
} break;
case 175: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 995 "rlparse.kl"

		/* Set the name in the actionDict. */
		Action *action = pd->actionDict.find( (__ref0)->data );
		if ( action != 0 ) {
			/* Pass up the action element */
			(__ref1)->action = action;
			if ( action->paramList != 0 )
				reject();
		}
		else {
			/* Will recover by returning null as the action. */
			error((__ref2)->loc) << "action lookup of \"" << (__ref3)->data << "\" failed" << endl;
			(__ref4)->action = 0;
		}
	

#line 8728 "rlparse.cc"
} break;
case 176: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 1012 "rlparse.kl"

		/* Set the name in the actionDict. */
		Action *action = pd->actionDict.find( (__ref0)->data );
		if ( action != 0 ) {

			if ( action->paramList == 0 )
				reject();

			/*
			 * Store the action we resolved. In the final action we will
			 * convert this to the specialized action. Can't do this here since
			 * it is a try action and we have not processed the args list (all
			 * done by final actions ).
			 */
			(__ref1)->action = action;
		}
		else {
			/* Will recover by returning null as the action. */
			error((__ref2)->loc) << "action lookup of \"" << (__ref3)->data << "\" failed" << endl;
			(__ref4)->action = 0;
		}
	

#line 8760 "rlparse.cc"
} break;
case 258: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1708 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8768 "rlparse.cc"
} break;
case 259: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1709 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8776 "rlparse.cc"
} break;
case 260: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1710 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8784 "rlparse.cc"
} break;
case 261: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1711 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8792 "rlparse.cc"
} break;
case 262: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1712 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8800 "rlparse.cc"
} break;
case 263: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1713 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8808 "rlparse.cc"
} break;
case 264: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1714 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8816 "rlparse.cc"
} break;
case 265: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1721 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8824 "rlparse.cc"
} break;
case 266: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1722 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8832 "rlparse.cc"
} break;
case 267: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1723 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8840 "rlparse.cc"
} break;
case 268: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1724 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8848 "rlparse.cc"
} break;
case 269: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1725 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8856 "rlparse.cc"
} break;
}
		#ifdef KELBT_LOG_ACTIONS
		cerr << "reduced: "
				<< Parser6_prodNames[reduction]
				<< " rhsLen: " << rhsLen;
		#endif
		if ( action[1] == 0 )
			redLel->retry = 0;
		else {
			redLel->retry += 0x10000;
			numRetry += 1;
			#ifdef KELBT_LOG_ACTIONS
			cerr << " retry: " << redLel;
			#endif
		}

		#ifdef KELBT_LOG_ACTIONS
		cerr << endl;
		#endif

		if ( rhsLen == 0 ) {
			redLel->file = lel->file;
			redLel->line = lel->line;
			targState = curs;
		}
		else {
			redLel->child = rhs[rhsLen-1];
			redLel->file = rhs[0]->file;
			redLel->line = rhs[0]->line;
			targState = rhs[0]->state;
		}

		if ( induceReject ) {
			#ifdef KELBT_LOG_ACTIONS
			cerr << "error induced during reduction of " <<
					Parser6_lelNames[redLel->type] << endl;
			#endif
			redLel->state = curs;
			redLel->next = stackTop;
			stackTop = redLel;
			curs = targState;
			goto parseError;
		}
		else {
			redLel->next = input;
			input = redLel;
		}
	}


	curs = targState;
	goto again;

parseError:
	#ifdef KELBT_LOG_BACKTRACK
	cerr << "hit error" << endl;
	#endif
	if ( numRetry > 0 ) {
		struct Parser6_LangEl *redLel;

		if ( input != 0 ) {
			redLel = input;
			goto have_undo_element;
		}

		while ( 1 ) {
			redLel = stackTop;
			if ( stackTop->type < 237 ) {
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "backing up over terminal: " <<
						Parser6_lelNames[stackTop->type] << endl;
				#endif
				stackTop = stackTop->next;
				redLel->next = input;
				input = redLel;
			}
			else {
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "backing up over non-terminal: " <<
						Parser6_lelNames[stackTop->type] << endl;
				#endif
				stackTop = stackTop->next;
				struct Parser6_LangEl *first = redLel->child;
				if ( first == 0 )
					rhsLen = 0;
				else {
					rhsLen = 1;
					while ( first->next != 0 ) {
						first = first->next;
						rhsLen += 1;
					}
					first->next = stackTop;
					stackTop = redLel->child;

					struct Parser6_LangEl *rhsEl = stackTop;
					int p = rhsLen;
					while ( p > 0 ) {
						rhs[--p] = rhsEl;
						rhsEl = rhsEl->next;
					}
				}
				redLel->next = pool;
				pool = redLel;
				numNodes -= 1;

				if ( input != 0 )
					input->causeReduce -= 1;
			}

have_undo_element:
			if ( redLel->retry == 0 ) {
				if ( input != 0 && input->causeReduce == 0 ) {
					#ifdef KELBT_LOG_BACKTRACK
					cerr << "pushing back: " << Parser6_lelNames[input->type] << endl;
					#endif
					input->next = queue;
					queue = input;
					input = 0;
				}
			}
			else {
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "found retry targ: " << redLel << endl;
				#endif
				numRetry -= 1;
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "found retry: " << redLel << endl;
				#endif
				if ( redLel->retry & 0x0000ffff )
					curs = input->state;
				else {
					input->retry = redLel->retry >> 16;
					if ( stackTop->state < 0 )
						curs = Parser6_startState;
					else {
						curs = Parser6_targs[(int)Parser6_indicies[Parser6_offsets[stackTop->state] + (stackTop->type - Parser6_keys[stackTop->state<<1])]];
					}
				}
				goto again;
			}
		}
	}
	curs = -1;
	errCount += 1;
_out: {}
#line 1809 "rlparse.kl"
	return errCount == 0 ? 0 : -1;
}

void Parser6::clear()
{
	while ( block != 0 ) {
		Parser6_Block *next = block->next;
		free( block );
		block = next;
	}

	clearTokdata( this );
}

void Parser6::tryMachineDef( const InputLoc &loc, char *name, 
		MachineDef *machineDef, bool isInstance )
{
	GraphDictEl *newEl = pd->graphDict.insert( name );
	if ( newEl != 0 ) {
		/* New element in the dict, all good. */
		newEl->value = new VarDef( name, machineDef );
		newEl->isInstance = isInstance;
		newEl->loc = loc;
		newEl->value->isExport = exportContext[exportContext.length()-1];

		/* It it is an instance, put on the instance list. */
		if ( isInstance ) {
			pd->instanceList.append( newEl );

		}
	}
	else {
		// Recover by ignoring the duplicate.
		error(loc) << "fsm \"" << name << "\" previously defined" << endl;
	}
}

ostream &Parser6::parse_error( int tokId, Token &token )
{
	/* Maintain the error count. */
	gblErrorCount += 1;

	cerr << token.loc << ": ";
	cerr << "at token ";
	if ( tokId < 128 )
		cerr << "\"" << Parser6_lelNames[tokId] << "\"";
	else 
		cerr << Parser6_lelNames[tokId];
	if ( token.data != 0 )
		cerr << " with data \"" << token.data << "\"";
	cerr << ": ";
	
	return cerr;
}

int Parser6::token( InputLoc &loc, int tokId, char *tokstart, int toklen )
{
	Token token;
	token.data = tokstart;
	token.length = toklen;
	token.loc.fileName = loc.fileName;
	token.loc.line = loc.line;
	token.loc.col = loc.col;
	int res = parseLangEl( tokId, &token );
	if ( res < 0 ) {
		parse_error(tokId, token) << "parse error" << endl;
		exit(1);
	}
	return res;
}
